<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.2.2 (Python 3.8.3 on win32)" generated="20231130 16:40:22.483" rpa="false">
<suite id="s1" name="Suites">
<suite id="s1-s1" name="SetClaimRefNumber" source="C:\Users\AGebril\PycharmProjects\QC_Automation_Claim\Tests\SetClaimRefNumber.robot">
<test id="s1-s1-t1" name="verify set claimRefNumber">
<kw name="Set_ClaimRefNum_By_IC">
<arguments>
<arg>http://claimsapi-qc.rasan.co</arg>
<arg>/api/Claim/GetClaimRefNumber</arg>
<arg>{
  "cid": "2023_10_4_20667129",
  "cRefNo": "1234"
}</arg>
<arg>200</arg>
<arg>["model"]["data"]["apiErrorOutputDTO"]["errorCode"]</arg>
<arg>1</arg>
</arguments>
<kw name="Create API session" library="API_Preferences">
<arguments>
<arg>${URL}</arg>
</arguments>
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>4</arg>
<arg>[NUMBERS]</arg>
</arguments>
<assign>
<var>${randomNumber}</var>
</assign>
<msg timestamp="20231130 16:40:24.535" level="INFO">${randomNumber} = 2088</msg>
<status status="PASS" starttime="20231130 16:40:24.535" endtime="20231130 16:40:24.535"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>session_${randomNumber}</arg>
</arguments>
<assign>
<var>${sessionName}</var>
</assign>
<msg timestamp="20231130 16:40:24.536" level="INFO">${sessionName} = session_2088</msg>
<status status="PASS" starttime="20231130 16:40:24.535" endtime="20231130 16:40:24.536"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${sessionName}</arg>
</arguments>
<msg timestamp="20231130 16:40:24.536" level="INFO">${sessionName} = session_2088</msg>
<status status="PASS" starttime="20231130 16:40:24.536" endtime="20231130 16:40:24.536"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${Base_Url}</arg>
<arg>timeout=30</arg>
<arg>disable_warnings=1</arg>
</arguments>
<msg timestamp="20231130 16:40:24.537" level="INFO">Creating Session using : alias=session_2088, url=http://claimsapi-qc.rasan.co, headers={},                     cookies={}, auth=None, timeout=30, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20231130 16:40:24.537" endtime="20231130 16:40:24.537"></status>
</kw>
<status status="PASS" starttime="20231130 16:40:24.534" endtime="20231130 16:40:24.537"></status>
</kw>
<kw name="Put Request to set Clamim Ref Number" library="API_Preferences">
<arguments>
<arg>${sessionName}</arg>
<arg>${URI}</arg>
<arg>${body}</arg>
<arg>${StatusCode}</arg>
<arg>${actual}</arg>
<arg>${Expected}</arg>
<arg>${RandomData}</arg>
</arguments>
<kw name="Put Request using data Driven Structure to set Claim Ref Number" library="API_Preferences">
<doc>Put request with DataDriven structure</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${Url}</arg>
<arg>${body}</arg>
<arg>${StatusCode}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20231130 16:40:24.539" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20231130 16:40:24.539" endtime="20231130 16:40:24.539"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary">
<doc>*DEPRECATED* Please use `PUT On Session` instead.</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${URI}</arg>
<arg>${data}</arg>
<arg>headers=${headers}</arg>
<arg>timeout=10</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20231130 16:40:24.539" level="WARN">Keyword 'RequestsLibrary.Put Request' is deprecated. Please use `PUT On Session` instead.</msg>
<msg timestamp="20231130 16:40:25.029" level="INFO">PUT Request : url=http://claimsapi-qc.rasan.co/api/Claim/GetClaimRefNumber 
 path_url=/api/Claim/GetClaimRefNumber 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '53'} 
 body=b'{\n  "cid": "2023_10_4_20667129",\n  "cRefNo": "1234"\n}' 
 </msg>
<msg timestamp="20231130 16:40:25.029" level="INFO">PUT Response : url=http://claimsapi-qc.rasan.co/api/Claim/GetClaimRefNumber 
 status=200, reason=OK 
 headers={'Server': 'nginx/1.25.1', 'Date': 'Thu, 30 Nov 2023 14:41:55 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive'} 
 body={"model":{"is_succeeded":true,"method_name":"Handle","status":{"code":1,"message":"Process Completed Successfully"},"exception":null,"data":{"apiErrorOutputDTO":{"errorCode":1,"errorMessage":"success"},"data":{"isAdded":true}}}} 
 </msg>
<msg timestamp="20231130 16:40:25.029" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20231130 16:40:24.539" endtime="20231130 16:40:25.029"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>json.loads('''${data}''')</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${Dict}</var>
</assign>
<msg timestamp="20231130 16:40:25.031" level="INFO">${Dict} = {'cid': '2023_10_4_20667129', 'cRefNo': '1234'}</msg>
<status status="PASS" starttime="20231130 16:40:25.030" endtime="20231130 16:40:25.031"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${ClaimRefNumber}</arg>
<arg>${Dict["cRefNo"]}</arg>
</arguments>
<msg timestamp="20231130 16:40:25.033" level="INFO">${ClaimRefNumber} = 1234</msg>
<status status="PASS" starttime="20231130 16:40:25.031" endtime="20231130 16:40:25.033"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${claimnumber}</arg>
<arg>${Dict["cid"]}</arg>
</arguments>
<msg timestamp="20231130 16:40:25.035" level="INFO">${claimnumber} = 2023_10_4_20667129</msg>
<status status="PASS" starttime="20231130 16:40:25.034" endtime="20231130 16:40:25.035"></status>
</kw>
<kw name="Status Should Be" library="RequestsLibrary">
<doc>Fails if response status code is different than the expected.</doc>
<arguments>
<arg>${statuscode}</arg>
<arg>${resp}</arg>
</arguments>
<status status="PASS" starttime="20231130 16:40:25.036" endtime="20231130 16:40:25.036"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>*DEPRECATED* Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${actualResult}</var>
</assign>
<msg timestamp="20231130 16:40:25.037" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20231130 16:40:25.037" level="INFO">To JSON using : content={"model":{"is_succeeded":true,"method_name":"Handle","status":{"code":1,"message":"Process Completed Successfully"},"exception":null,"data":{"apiErrorOutputDTO":{"errorCode":1,"errorMessage":"success"},"data":{"isAdded":true}}}} </msg>
<msg timestamp="20231130 16:40:25.038" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20231130 16:40:25.038" level="INFO">${actualResult} = {'model': {'is_succeeded': True, 'method_name': 'Handle', 'status': {'code': 1, 'message': 'Process Completed Successfully'}, 'exception': None, 'data': {'apiErrorOutputDTO': {'errorCode': 1, 'errorMe...</msg>
<status status="PASS" starttime="20231130 16:40:25.036" endtime="20231130 16:40:25.038"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${actualResult}</arg>
</arguments>
<msg timestamp="20231130 16:40:25.039" level="INFO">${actualResult} = {'model': {'is_succeeded': True, 'method_name': 'Handle', 'status': {'code': 1, 'message': 'Process Completed Successfully'}, 'exception': None, 'data': {'apiErrorOutputDTO': {'errorCode': 1, 'errorMe...</msg>
<status status="PASS" starttime="20231130 16:40:25.038" endtime="20231130 16:40:25.039"></status>
</kw>
<status status="PASS" starttime="20231130 16:40:24.538" endtime="20231130 16:40:25.040"></status>
</kw>
<kw name="Verify API Response" library="ClaimRefNumberValidations">
<doc>Validate date returned from response body and DB</doc>
<arguments>
<arg>${actual}</arg>
<arg>${Expected}</arg>
</arguments>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>should be equal as strings</arg>
<arg>${actualResult["model"]["data"]["apiErrorOutputDTO"]["errorMessage"]}</arg>
<arg>success</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${actualResult["model"]["data"]["apiErrorOutputDTO"]["errorMessage"]}</arg>
<arg>success</arg>
</arguments>
<status status="PASS" starttime="20231130 16:40:25.041" endtime="20231130 16:40:25.042"></status>
</kw>
<msg timestamp="20231130 16:40:25.042" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20231130 16:40:25.041" endtime="20231130 16:40:25.042"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<msg timestamp="20231130 16:40:25.043" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20231130 16:40:25.043" endtime="20231130 16:40:25.043"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${status}"== "True"</arg>
<arg>run keywords</arg>
<arg>DB_Get_Claim_Ref_Number_by_CID</arg>
<arg>${claimnumber}</arg>
<arg>AND</arg>
<arg>should be equal as strings</arg>
<arg>${ClaimRefNumber}</arg>
<arg>${Claim_Ref_Num}</arg>
<arg>ignore_case=True</arg>
<arg>AND</arg>
<arg>should be equal as strings</arg>
<arg>16</arg>
<arg>${Status_ID}</arg>
<arg>ignore_case=True</arg>
<arg>ELSE IF</arg>
<arg>"${status}"== "False"</arg>
<arg>should be equal as strings</arg>
<arg>${actualResult${actual}}</arg>
<arg>${Expected}</arg>
<arg>ignore_case=True</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>DB_Get_Claim_Ref_Number_by_CID</arg>
<arg>${claimnumber}</arg>
<arg>AND</arg>
<arg>should be equal as strings</arg>
<arg>${ClaimRefNumber}</arg>
<arg>${Claim_Ref_Num}</arg>
<arg>ignore_case=True</arg>
<arg>AND</arg>
<arg>should be equal as strings</arg>
<arg>16</arg>
<arg>${Status_ID}</arg>
<arg>ignore_case=True</arg>
</arguments>
<kw name="DB_Get_Claim_Ref_Number_by_CID" library="Assertions">
<arguments>
<arg>${claimnumber}</arg>
</arguments>
<kw name="Connect_DB" library="DataBaseConnection">
<kw name="Set Log Level" library="BuiltIn">
<doc>Sets the log threshold to the specified level and returns the old level.</doc>
<arguments>
<arg>NONE</arg>
</arguments>
<status status="PASS" starttime="20231130 16:40:25.047" endtime="20231130 16:40:25.048"></status>
</kw>
<kw name="Connect To Database" library="DatabaseLibrary">
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using `dbName`, `dbUsername`, and `dbPassword`.</doc>
<arguments>
<arg>pymssql</arg>
<arg>${DBName}</arg>
<arg>${DBUser}</arg>
<arg>${DBPass}</arg>
<arg>${DBHost}</arg>
<arg>${DBPort}</arg>
</arguments>
<status status="PASS" starttime="20231130 16:40:25.048" endtime="20231130 16:40:26.664"></status>
</kw>
<kw name="Set Log Level" library="BuiltIn">
<doc>Sets the log threshold to the specified level and returns the old level.</doc>
<arguments>
<arg>INFO</arg>
</arguments>
<msg timestamp="20231130 16:40:26.665" level="INFO">Log level changed from NONE to INFO.</msg>
<status status="PASS" starttime="20231130 16:40:26.664" endtime="20231130 16:40:26.665"></status>
</kw>
<status status="PASS" starttime="20231130 16:40:25.046" endtime="20231130 16:40:26.666"></status>
</kw>
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>select * from Claim where ClaimNumber='${claimnumber}'</arg>
</arguments>
<assign>
<var>${Claims}</var>
</assign>
<msg timestamp="20231130 16:40:26.666" level="INFO">Executing : Query  |  select * from Claim where ClaimNumber='2023_10_4_20667129' </msg>
<msg timestamp="20231130 16:40:27.058" level="INFO">${Claims} = [(4, 1, '2023_10_4_20667129', 'SA0380000000608010167519', 'SA0380000000608010167519', '24.7136', '46.6753', 'Riyadh', 1, 'TR-001', 'AR-001', 10, True, 16, 27, datetime.datetime(2023, 10, 4, 12, 25, 46...</msg>
<status status="PASS" starttime="20231130 16:40:26.666" endtime="20231130 16:40:27.059"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${Claim_Ref_Num}</arg>
<arg>${Claims[0][16]}</arg>
</arguments>
<msg timestamp="20231130 16:40:27.061" level="INFO">${Claim_Ref_Num} = 1234</msg>
<status status="PASS" starttime="20231130 16:40:27.059" endtime="20231130 16:40:27.061"></status>
</kw>
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>select * from Claim where ClaimNumber='${claimnumber}'</arg>
</arguments>
<assign>
<var>${Claims}</var>
</assign>
<msg timestamp="20231130 16:40:27.062" level="INFO">Executing : Query  |  select * from Claim where ClaimNumber='2023_10_4_20667129' </msg>
<msg timestamp="20231130 16:40:27.484" level="INFO">${Claims} = [(4, 1, '2023_10_4_20667129', 'SA0380000000608010167519', 'SA0380000000608010167519', '24.7136', '46.6753', 'Riyadh', 1, 'TR-001', 'AR-001', 10, True, 16, 27, datetime.datetime(2023, 10, 4, 12, 25, 46...</msg>
<status status="PASS" starttime="20231130 16:40:27.061" endtime="20231130 16:40:27.485"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${Status_ID}</arg>
<arg>${Claims[0][13]}</arg>
</arguments>
<msg timestamp="20231130 16:40:27.487" level="INFO">${Status_ID} = 16</msg>
<status status="PASS" starttime="20231130 16:40:27.485" endtime="20231130 16:40:27.487"></status>
</kw>
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>select * from Claim cl join LookupData ld on cl.StatusId=ld.Id where cl.ClaimNumber='${claimnumber}'</arg>
</arguments>
<assign>
<var>${Claims}</var>
</assign>
<msg timestamp="20231130 16:40:27.488" level="INFO">Executing : Query  |  select * from Claim cl join LookupData ld on cl.StatusId=ld.Id where cl.ClaimNumber='2023_10_4_20667129' </msg>
<msg timestamp="20231130 16:40:28.049" level="INFO">${Claims} = [(4, 1, '2023_10_4_20667129', 'SA0380000000608010167519', 'SA0380000000608010167519', '24.7136', '46.6753', 'Riyadh', 1, 'TR-001', 'AR-001', 10, True, 16, 27, datetime.datetime(2023, 10, 4, 12, 25, 46...</msg>
<status status="PASS" starttime="20231130 16:40:27.487" endtime="20231130 16:40:28.049"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${Status_Desc}</arg>
<arg>${Claims[0][28]}</arg>
</arguments>
<msg timestamp="20231130 16:40:28.052" level="INFO">${Status_Desc} = None</msg>
<status status="PASS" starttime="20231130 16:40:28.050" endtime="20231130 16:40:28.052"></status>
</kw>
<kw name="Disconnect_DB" library="DataBaseConnection">
<kw name="Disconnect From Database" library="DatabaseLibrary">
<doc>Disconnects from the database.</doc>
<msg timestamp="20231130 16:40:28.053" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20231130 16:40:28.053" endtime="20231130 16:40:28.054"></status>
</kw>
<status status="PASS" starttime="20231130 16:40:28.052" endtime="20231130 16:40:28.054"></status>
</kw>
<status status="PASS" starttime="20231130 16:40:25.045" endtime="20231130 16:40:28.054"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ClaimRefNumber}</arg>
<arg>${Claim_Ref_Num}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" starttime="20231130 16:40:28.054" endtime="20231130 16:40:28.055"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>16</arg>
<arg>${Status_ID}</arg>
<arg>ignore_case=True</arg>
</arguments>
<msg timestamp="20231130 16:40:28.055" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'int'&gt;</msg>
<status status="PASS" starttime="20231130 16:40:28.055" endtime="20231130 16:40:28.055"></status>
</kw>
<status status="PASS" starttime="20231130 16:40:25.045" endtime="20231130 16:40:28.056"></status>
</kw>
<status status="PASS" starttime="20231130 16:40:25.043" endtime="20231130 16:40:28.056"></status>
</kw>
<status status="PASS" starttime="20231130 16:40:25.040" endtime="20231130 16:40:28.056"></status>
</kw>
<status status="PASS" starttime="20231130 16:40:24.537" endtime="20231130 16:40:28.056"></status>
</kw>
<status status="PASS" starttime="20231130 16:40:24.533" endtime="20231130 16:40:28.056"></status>
</kw>
<tags>
<tag>regression</tag>
<tag>smoke</tag>
</tags>
<status status="PASS" starttime="20231130 16:40:24.532" endtime="20231130 16:40:28.057" critical="yes"></status>
</test>
<test id="s1-s1-t2" name="verify set claimRefNumber">
<kw name="Set_ClaimRefNum_By_IC">
<arguments>
<arg>http://claimsapi-qc.rasan.co</arg>
<arg>/api/Claim/GetClaimRefNumber</arg>
<arg>{
  "cid": "1234",
  "cRefNo": "1234"
}</arg>
<arg>400</arg>
<arg>["model"]["data"]["apiErrorOutputDTO"]["errorCode"]</arg>
<arg>185</arg>
</arguments>
<kw name="Create API session" library="API_Preferences">
<arguments>
<arg>${URL}</arg>
</arguments>
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>4</arg>
<arg>[NUMBERS]</arg>
</arguments>
<assign>
<var>${randomNumber}</var>
</assign>
<msg timestamp="20231130 16:40:28.067" level="INFO">${randomNumber} = 1292</msg>
<status status="PASS" starttime="20231130 16:40:28.066" endtime="20231130 16:40:28.067"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>session_${randomNumber}</arg>
</arguments>
<assign>
<var>${sessionName}</var>
</assign>
<msg timestamp="20231130 16:40:28.067" level="INFO">${sessionName} = session_1292</msg>
<status status="PASS" starttime="20231130 16:40:28.067" endtime="20231130 16:40:28.067"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${sessionName}</arg>
</arguments>
<msg timestamp="20231130 16:40:28.068" level="INFO">${sessionName} = session_1292</msg>
<status status="PASS" starttime="20231130 16:40:28.067" endtime="20231130 16:40:28.068"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${Base_Url}</arg>
<arg>timeout=30</arg>
<arg>disable_warnings=1</arg>
</arguments>
<msg timestamp="20231130 16:40:28.068" level="INFO">Creating Session using : alias=session_1292, url=http://claimsapi-qc.rasan.co, headers={},                     cookies={}, auth=None, timeout=30, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20231130 16:40:28.068" endtime="20231130 16:40:28.069"></status>
</kw>
<status status="PASS" starttime="20231130 16:40:28.066" endtime="20231130 16:40:28.069"></status>
</kw>
<kw name="Put Request to set Clamim Ref Number" library="API_Preferences">
<arguments>
<arg>${sessionName}</arg>
<arg>${URI}</arg>
<arg>${body}</arg>
<arg>${StatusCode}</arg>
<arg>${actual}</arg>
<arg>${Expected}</arg>
<arg>${RandomData}</arg>
</arguments>
<kw name="Put Request using data Driven Structure to set Claim Ref Number" library="API_Preferences">
<doc>Put request with DataDriven structure</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${Url}</arg>
<arg>${body}</arg>
<arg>${StatusCode}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20231130 16:40:28.071" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20231130 16:40:28.071" endtime="20231130 16:40:28.071"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary">
<doc>*DEPRECATED* Please use `PUT On Session` instead.</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${URI}</arg>
<arg>${data}</arg>
<arg>headers=${headers}</arg>
<arg>timeout=10</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20231130 16:40:28.071" level="WARN">Keyword 'RequestsLibrary.Put Request' is deprecated. Please use `PUT On Session` instead.</msg>
<msg timestamp="20231130 16:40:28.435" level="INFO">PUT Request : url=http://claimsapi-qc.rasan.co/api/Claim/GetClaimRefNumber 
 path_url=/api/Claim/GetClaimRefNumber 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '39'} 
 body=b'{\n  "cid": "1234",\n  "cRefNo": "1234"\n}' 
 </msg>
<msg timestamp="20231130 16:40:28.435" level="INFO">PUT Response : url=http://claimsapi-qc.rasan.co/api/Claim/GetClaimRefNumber 
 status=400, reason=Bad Request 
 headers={'Server': 'nginx/1.25.1', 'Date': 'Thu, 30 Nov 2023 14:41:58 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive'} 
 body={"model":{"is_succeeded":false,"method_name":"Handle","status":{"code":2,"message":"Failed"},"exception":null,"data":{"apiErrorOutputDTO":{"errorCode":185,"errorMessage":"NotFound"},"data":null}}} 
 </msg>
<msg timestamp="20231130 16:40:28.436" level="INFO">${resp} = &lt;Response [400]&gt;</msg>
<status status="PASS" starttime="20231130 16:40:28.071" endtime="20231130 16:40:28.436"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>json.loads('''${data}''')</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${Dict}</var>
</assign>
<msg timestamp="20231130 16:40:28.438" level="INFO">${Dict} = {'cid': '1234', 'cRefNo': '1234'}</msg>
<status status="PASS" starttime="20231130 16:40:28.436" endtime="20231130 16:40:28.438"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${ClaimRefNumber}</arg>
<arg>${Dict["cRefNo"]}</arg>
</arguments>
<msg timestamp="20231130 16:40:28.441" level="INFO">${ClaimRefNumber} = 1234</msg>
<status status="PASS" starttime="20231130 16:40:28.439" endtime="20231130 16:40:28.441"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${claimnumber}</arg>
<arg>${Dict["cid"]}</arg>
</arguments>
<msg timestamp="20231130 16:40:28.442" level="INFO">${claimnumber} = 1234</msg>
<status status="PASS" starttime="20231130 16:40:28.441" endtime="20231130 16:40:28.443"></status>
</kw>
<kw name="Status Should Be" library="RequestsLibrary">
<doc>Fails if response status code is different than the expected.</doc>
<arguments>
<arg>${statuscode}</arg>
<arg>${resp}</arg>
</arguments>
<status status="PASS" starttime="20231130 16:40:28.443" endtime="20231130 16:40:28.443"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>*DEPRECATED* Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${actualResult}</var>
</assign>
<msg timestamp="20231130 16:40:28.444" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20231130 16:40:28.445" level="INFO">To JSON using : content={"model":{"is_succeeded":false,"method_name":"Handle","status":{"code":2,"message":"Failed"},"exception":null,"data":{"apiErrorOutputDTO":{"errorCode":185,"errorMessage":"NotFound"},"data":null}}} </msg>
<msg timestamp="20231130 16:40:28.446" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20231130 16:40:28.446" level="INFO">${actualResult} = {'model': {'is_succeeded': False, 'method_name': 'Handle', 'status': {'code': 2, 'message': 'Failed'}, 'exception': None, 'data': {'apiErrorOutputDTO': {'errorCode': 185, 'errorMessage': 'NotFound'}, ...</msg>
<status status="PASS" starttime="20231130 16:40:28.444" endtime="20231130 16:40:28.446"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${actualResult}</arg>
</arguments>
<msg timestamp="20231130 16:40:28.447" level="INFO">${actualResult} = {'model': {'is_succeeded': False, 'method_name': 'Handle', 'status': {'code': 2, 'message': 'Failed'}, 'exception': None, 'data': {'apiErrorOutputDTO': {'errorCode': 185, 'errorMessage': 'NotFound'}, ...</msg>
<status status="PASS" starttime="20231130 16:40:28.446" endtime="20231130 16:40:28.447"></status>
</kw>
<status status="PASS" starttime="20231130 16:40:28.070" endtime="20231130 16:40:28.447"></status>
</kw>
<kw name="Verify API Response" library="ClaimRefNumberValidations">
<doc>Validate date returned from response body and DB</doc>
<arguments>
<arg>${actual}</arg>
<arg>${Expected}</arg>
</arguments>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>should be equal as strings</arg>
<arg>${actualResult["model"]["data"]["apiErrorOutputDTO"]["errorMessage"]}</arg>
<arg>success</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${actualResult["model"]["data"]["apiErrorOutputDTO"]["errorMessage"]}</arg>
<arg>success</arg>
</arguments>
<msg timestamp="20231130 16:40:28.450" level="FAIL">NotFound != success</msg>
<status status="FAIL" starttime="20231130 16:40:28.449" endtime="20231130 16:40:28.450"></status>
</kw>
<msg timestamp="20231130 16:40:28.450" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20231130 16:40:28.448" endtime="20231130 16:40:28.450"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<msg timestamp="20231130 16:40:28.451" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20231130 16:40:28.450" endtime="20231130 16:40:28.451"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${status}"== "True"</arg>
<arg>run keywords</arg>
<arg>DB_Get_Claim_Ref_Number_by_CID</arg>
<arg>${claimnumber}</arg>
<arg>AND</arg>
<arg>should be equal as strings</arg>
<arg>${ClaimRefNumber}</arg>
<arg>${Claim_Ref_Num}</arg>
<arg>ignore_case=True</arg>
<arg>AND</arg>
<arg>should be equal as strings</arg>
<arg>16</arg>
<arg>${Status_ID}</arg>
<arg>ignore_case=True</arg>
<arg>ELSE IF</arg>
<arg>"${status}"== "False"</arg>
<arg>should be equal as strings</arg>
<arg>${actualResult${actual}}</arg>
<arg>${Expected}</arg>
<arg>ignore_case=True</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${actualResult${actual}}</arg>
<arg>${Expected}</arg>
<arg>ignore_case=True</arg>
</arguments>
<msg timestamp="20231130 16:40:28.452" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20231130 16:40:28.451" endtime="20231130 16:40:28.452"></status>
</kw>
<status status="PASS" starttime="20231130 16:40:28.451" endtime="20231130 16:40:28.452"></status>
</kw>
<status status="PASS" starttime="20231130 16:40:28.448" endtime="20231130 16:40:28.452"></status>
</kw>
<status status="PASS" starttime="20231130 16:40:28.069" endtime="20231130 16:40:28.452"></status>
</kw>
<status status="PASS" starttime="20231130 16:40:28.065" endtime="20231130 16:40:28.452"></status>
</kw>
<tags>
<tag>regression</tag>
<tag>smoke</tag>
</tags>
<status status="PASS" starttime="20231130 16:40:28.058" endtime="20231130 16:40:28.452" critical="yes"></status>
</test>
<test id="s1-s1-t3" name="verify set claimRefNumber">
<kw name="Set_ClaimRefNum_By_IC">
<arguments>
<arg>http://claimsapi-qc.rasan.co</arg>
<arg>/api/Claim/GetClaimRefNumber</arg>
<arg>{
  "cid": "2023_10_4_59518994",
  "cRefNo": "1234"
}</arg>
<arg>400</arg>
<arg>["model"]["data"]["apiErrorOutputDTO"]["errorCode"]</arg>
<arg>282</arg>
</arguments>
<kw name="Create API session" library="API_Preferences">
<arguments>
<arg>${URL}</arg>
</arguments>
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>4</arg>
<arg>[NUMBERS]</arg>
</arguments>
<assign>
<var>${randomNumber}</var>
</assign>
<msg timestamp="20231130 16:40:28.457" level="INFO">${randomNumber} = 5079</msg>
<status status="PASS" starttime="20231130 16:40:28.457" endtime="20231130 16:40:28.457"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>session_${randomNumber}</arg>
</arguments>
<assign>
<var>${sessionName}</var>
</assign>
<msg timestamp="20231130 16:40:28.458" level="INFO">${sessionName} = session_5079</msg>
<status status="PASS" starttime="20231130 16:40:28.458" endtime="20231130 16:40:28.458"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${sessionName}</arg>
</arguments>
<msg timestamp="20231130 16:40:28.459" level="INFO">${sessionName} = session_5079</msg>
<status status="PASS" starttime="20231130 16:40:28.458" endtime="20231130 16:40:28.459"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${Base_Url}</arg>
<arg>timeout=30</arg>
<arg>disable_warnings=1</arg>
</arguments>
<msg timestamp="20231130 16:40:28.460" level="INFO">Creating Session using : alias=session_5079, url=http://claimsapi-qc.rasan.co, headers={},                     cookies={}, auth=None, timeout=30, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20231130 16:40:28.460" endtime="20231130 16:40:28.460"></status>
</kw>
<status status="PASS" starttime="20231130 16:40:28.456" endtime="20231130 16:40:28.460"></status>
</kw>
<kw name="Put Request to set Clamim Ref Number" library="API_Preferences">
<arguments>
<arg>${sessionName}</arg>
<arg>${URI}</arg>
<arg>${body}</arg>
<arg>${StatusCode}</arg>
<arg>${actual}</arg>
<arg>${Expected}</arg>
<arg>${RandomData}</arg>
</arguments>
<kw name="Put Request using data Driven Structure to set Claim Ref Number" library="API_Preferences">
<doc>Put request with DataDriven structure</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${Url}</arg>
<arg>${body}</arg>
<arg>${StatusCode}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20231130 16:40:28.462" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20231130 16:40:28.462" endtime="20231130 16:40:28.462"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary">
<doc>*DEPRECATED* Please use `PUT On Session` instead.</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${URI}</arg>
<arg>${data}</arg>
<arg>headers=${headers}</arg>
<arg>timeout=10</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20231130 16:40:28.462" level="WARN">Keyword 'RequestsLibrary.Put Request' is deprecated. Please use `PUT On Session` instead.</msg>
<msg timestamp="20231130 16:40:28.739" level="INFO">PUT Request : url=http://claimsapi-qc.rasan.co/api/Claim/GetClaimRefNumber 
 path_url=/api/Claim/GetClaimRefNumber 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '53'} 
 body=b'{\n  "cid": "2023_10_4_59518994",\n  "cRefNo": "1234"\n}' 
 </msg>
<msg timestamp="20231130 16:40:28.739" level="INFO">PUT Response : url=http://claimsapi-qc.rasan.co/api/Claim/GetClaimRefNumber 
 status=400, reason=Bad Request 
 headers={'Server': 'nginx/1.25.1', 'Date': 'Thu, 30 Nov 2023 14:41:59 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive'} 
 body={"model":{"is_succeeded":false,"method_name":"Handle","status":{"code":2,"message":"Failed"},"exception":null,"data":{"apiErrorOutputDTO":{"errorCode":282,"errorMessage":"OperationNotAllowed"},"data":null}}} 
 </msg>
<msg timestamp="20231130 16:40:28.739" level="INFO">${resp} = &lt;Response [400]&gt;</msg>
<status status="PASS" starttime="20231130 16:40:28.462" endtime="20231130 16:40:28.739"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>json.loads('''${data}''')</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${Dict}</var>
</assign>
<msg timestamp="20231130 16:40:28.740" level="INFO">${Dict} = {'cid': '2023_10_4_59518994', 'cRefNo': '1234'}</msg>
<status status="PASS" starttime="20231130 16:40:28.739" endtime="20231130 16:40:28.740"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${ClaimRefNumber}</arg>
<arg>${Dict["cRefNo"]}</arg>
</arguments>
<msg timestamp="20231130 16:40:28.742" level="INFO">${ClaimRefNumber} = 1234</msg>
<status status="PASS" starttime="20231130 16:40:28.740" endtime="20231130 16:40:28.743"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${claimnumber}</arg>
<arg>${Dict["cid"]}</arg>
</arguments>
<msg timestamp="20231130 16:40:28.745" level="INFO">${claimnumber} = 2023_10_4_59518994</msg>
<status status="PASS" starttime="20231130 16:40:28.743" endtime="20231130 16:40:28.745"></status>
</kw>
<kw name="Status Should Be" library="RequestsLibrary">
<doc>Fails if response status code is different than the expected.</doc>
<arguments>
<arg>${statuscode}</arg>
<arg>${resp}</arg>
</arguments>
<status status="PASS" starttime="20231130 16:40:28.745" endtime="20231130 16:40:28.746"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>*DEPRECATED* Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${actualResult}</var>
</assign>
<msg timestamp="20231130 16:40:28.747" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20231130 16:40:28.747" level="INFO">To JSON using : content={"model":{"is_succeeded":false,"method_name":"Handle","status":{"code":2,"message":"Failed"},"exception":null,"data":{"apiErrorOutputDTO":{"errorCode":282,"errorMessage":"OperationNotAllowed"},"data":null}}} </msg>
<msg timestamp="20231130 16:40:28.747" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20231130 16:40:28.748" level="INFO">${actualResult} = {'model': {'is_succeeded': False, 'method_name': 'Handle', 'status': {'code': 2, 'message': 'Failed'}, 'exception': None, 'data': {'apiErrorOutputDTO': {'errorCode': 282, 'errorMessage': 'OperationNot...</msg>
<status status="PASS" starttime="20231130 16:40:28.746" endtime="20231130 16:40:28.748"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${actualResult}</arg>
</arguments>
<msg timestamp="20231130 16:40:28.748" level="INFO">${actualResult} = {'model': {'is_succeeded': False, 'method_name': 'Handle', 'status': {'code': 2, 'message': 'Failed'}, 'exception': None, 'data': {'apiErrorOutputDTO': {'errorCode': 282, 'errorMessage': 'OperationNot...</msg>
<status status="PASS" starttime="20231130 16:40:28.748" endtime="20231130 16:40:28.748"></status>
</kw>
<status status="PASS" starttime="20231130 16:40:28.461" endtime="20231130 16:40:28.749"></status>
</kw>
<kw name="Verify API Response" library="ClaimRefNumberValidations">
<doc>Validate date returned from response body and DB</doc>
<arguments>
<arg>${actual}</arg>
<arg>${Expected}</arg>
</arguments>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>should be equal as strings</arg>
<arg>${actualResult["model"]["data"]["apiErrorOutputDTO"]["errorMessage"]}</arg>
<arg>success</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${actualResult["model"]["data"]["apiErrorOutputDTO"]["errorMessage"]}</arg>
<arg>success</arg>
</arguments>
<msg timestamp="20231130 16:40:28.751" level="FAIL">OperationNotAllowed != success</msg>
<status status="FAIL" starttime="20231130 16:40:28.751" endtime="20231130 16:40:28.752"></status>
</kw>
<msg timestamp="20231130 16:40:28.752" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20231130 16:40:28.750" endtime="20231130 16:40:28.752"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<msg timestamp="20231130 16:40:28.753" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20231130 16:40:28.752" endtime="20231130 16:40:28.753"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${status}"== "True"</arg>
<arg>run keywords</arg>
<arg>DB_Get_Claim_Ref_Number_by_CID</arg>
<arg>${claimnumber}</arg>
<arg>AND</arg>
<arg>should be equal as strings</arg>
<arg>${ClaimRefNumber}</arg>
<arg>${Claim_Ref_Num}</arg>
<arg>ignore_case=True</arg>
<arg>AND</arg>
<arg>should be equal as strings</arg>
<arg>16</arg>
<arg>${Status_ID}</arg>
<arg>ignore_case=True</arg>
<arg>ELSE IF</arg>
<arg>"${status}"== "False"</arg>
<arg>should be equal as strings</arg>
<arg>${actualResult${actual}}</arg>
<arg>${Expected}</arg>
<arg>ignore_case=True</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${actualResult${actual}}</arg>
<arg>${Expected}</arg>
<arg>ignore_case=True</arg>
</arguments>
<msg timestamp="20231130 16:40:28.754" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20231130 16:40:28.754" endtime="20231130 16:40:28.754"></status>
</kw>
<status status="PASS" starttime="20231130 16:40:28.753" endtime="20231130 16:40:28.755"></status>
</kw>
<status status="PASS" starttime="20231130 16:40:28.749" endtime="20231130 16:40:28.755"></status>
</kw>
<status status="PASS" starttime="20231130 16:40:28.461" endtime="20231130 16:40:28.755"></status>
</kw>
<status status="PASS" starttime="20231130 16:40:28.456" endtime="20231130 16:40:28.755"></status>
</kw>
<tags>
<tag>regression</tag>
<tag>smoke</tag>
</tags>
<status status="PASS" starttime="20231130 16:40:28.454" endtime="20231130 16:40:28.756" critical="yes"></status>
</test>
<doc>Suite description</doc>
<status status="PASS" starttime="20231130 16:40:22.517" endtime="20231130 16:40:28.757"></status>
</suite>
<status status="PASS" starttime="20231130 16:40:22.496" endtime="20231130 16:40:28.760"></status>
</suite>
<statistics>
<total>
<stat pass="3" fail="0">Critical Tests</stat>
<stat pass="3" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="3" fail="0">regression</stat>
<stat pass="3" fail="0">smoke</stat>
</tag>
<suite>
<stat pass="3" fail="0" id="s1" name="Suites">Suites</stat>
<stat pass="3" fail="0" id="s1-s1" name="SetClaimRefNumber">Suites.SetClaimRefNumber</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20231130 16:40:24.539" level="WARN">Keyword 'RequestsLibrary.Put Request' is deprecated. Please use `PUT On Session` instead.</msg>
<msg timestamp="20231130 16:40:25.037" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20231130 16:40:28.058" level="WARN">Multiple test cases with name 'verify set claimRefNumber' executed in test suite 'Suites.SetClaimRefNumber'.</msg>
<msg timestamp="20231130 16:40:28.071" level="WARN">Keyword 'RequestsLibrary.Put Request' is deprecated. Please use `PUT On Session` instead.</msg>
<msg timestamp="20231130 16:40:28.444" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20231130 16:40:28.453" level="WARN">Multiple test cases with name 'verify set claimRefNumber' executed in test suite 'Suites.SetClaimRefNumber'.</msg>
<msg timestamp="20231130 16:40:28.462" level="WARN">Keyword 'RequestsLibrary.Put Request' is deprecated. Please use `PUT On Session` instead.</msg>
<msg timestamp="20231130 16:40:28.747" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
</errors>
</robot>
