<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.2.2 (Python 3.8.3 on win32)" generated="20231130 16:40:21.493" rpa="false">
<suite id="s1" name="Suites">
<suite id="s1-s1" name="GetAllClaims" source="C:\Users\AGebril\PycharmProjects\QC_Automation_Claim\Tests\GetAllClaims.robot">
<test id="s1-s1-t1" name="verify get claims">
<kw name="Get_All_Submitted_Claims">
<arguments>
<arg>http://claimsapi-qc.rasan.co/</arg>
<arg>/api/Claim/Claims?Status=10&amp;PageNumber=1&amp;PageSize=10</arg>
<arg>200</arg>
<arg>["model"]["data"]["apiErrorOutputDTO"]["errorCode"]</arg>
<arg>1</arg>
</arguments>
<kw name="Create API session" library="API_Preferences">
<arguments>
<arg>${URL}</arg>
</arguments>
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>4</arg>
<arg>[NUMBERS]</arg>
</arguments>
<assign>
<var>${randomNumber}</var>
</assign>
<msg timestamp="20231130 16:40:45.054" level="INFO">${randomNumber} = 7689</msg>
<status status="PASS" starttime="20231130 16:40:45.053" endtime="20231130 16:40:45.054"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>session_${randomNumber}</arg>
</arguments>
<assign>
<var>${sessionName}</var>
</assign>
<msg timestamp="20231130 16:40:45.054" level="INFO">${sessionName} = session_7689</msg>
<status status="PASS" starttime="20231130 16:40:45.054" endtime="20231130 16:40:45.054"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${sessionName}</arg>
</arguments>
<msg timestamp="20231130 16:40:45.055" level="INFO">${sessionName} = session_7689</msg>
<status status="PASS" starttime="20231130 16:40:45.054" endtime="20231130 16:40:45.055"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${Base_Url}</arg>
<arg>timeout=30</arg>
<arg>disable_warnings=1</arg>
</arguments>
<msg timestamp="20231130 16:40:45.056" level="INFO">Creating Session using : alias=session_7689, url=http://claimsapi-qc.rasan.co/, headers={},                     cookies={}, auth=None, timeout=30, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20231130 16:40:45.055" endtime="20231130 16:40:45.056"></status>
</kw>
<status status="PASS" starttime="20231130 16:40:45.053" endtime="20231130 16:40:45.056"></status>
</kw>
<kw name="Get Request claim" library="API_Preferences">
<arguments>
<arg>${sessionName}</arg>
<arg>${URI}</arg>
<arg>${StatusCode}</arg>
<arg>${actual}</arg>
<arg>${Expected}</arg>
<arg>${RandomData}</arg>
</arguments>
<kw name="Get Request using data Driven Structure" library="API_Preferences">
<doc>Get request with DataDriven structure</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${Url}</arg>
<arg>${StatusCode}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20231130 16:40:45.058" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20231130 16:40:45.058" endtime="20231130 16:40:45.058"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>*DEPRECATED* Please use `GET On Session` instead.</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${URI}</arg>
<arg>headers=${headers}</arg>
<arg>timeout=10</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20231130 16:40:45.059" level="WARN">Keyword 'RequestsLibrary.Get Request' is deprecated. Please use `GET On Session` instead.</msg>
<msg timestamp="20231130 16:40:45.509" level="INFO">GET Request : url=http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=10&amp;PageNumber=1&amp;PageSize=10 
 path_url=/api/Claim/Claims?Status=10&amp;PageNumber=1&amp;PageSize=10 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
 body=None 
 </msg>
<msg timestamp="20231130 16:40:45.509" level="INFO">GET Response : url=http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=10&amp;PageNumber=1&amp;PageSize=10 
 status=500, reason=Internal Server Error 
 headers={'Server': 'nginx/1.25.1', 'Date': 'Thu, 30 Nov 2023 14:42:15 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive'} 
 body={"traceId":"89883f3b-57af-4b63-88ae-3b1ddb9f2fbf","errorCode":null,"errors":["System.NotSupportedException: Serialization and deserialization of 'System.IntPtr' instances are not supported. Path: $.model.exception.TargetSite.MethodHandle.Value.\n ---&gt; System.NotSupportedException: Serialization and deserialization of 'System.IntPtr' instances are not supported.\n   at System.Text.Json.Serialization.Converters.UnsupportedTypeConverter`1.Write(Utf8JsonWriter writer, T value, JsonSerializerOptions options)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   --- End of inner exception stack trace ---\n   at System.Text.Json.ThrowHelper.ThrowNotSupportedException(WriteStack&amp; state, NotSupportedException ex)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCoreAsObject(Utf8JsonWriter writer, Object value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.JsonSerializer.WriteCore[TValue](JsonConverter jsonConverter, Utf8JsonWriter writer, TValue&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeNextResultFilterAsync&gt;g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultFilters()\n--- End of stack trace from previous location ---\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeFilterPipelineAsync&gt;g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Logged|17_1(ResourceInvoker invoker)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Logged|17_1(ResourceInvoker invoker)\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.&lt;Invoke&gt;g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\n   at InsurTech.Core.Api.Infrastructure.Middlewares.IdentityMiddleware.InvokeAsync(HttpContext httpContext)\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\n   at InsurTech.Core.Api.Infrastructure.Middlewares.ExceptionMiddleware.InvokeAsync(HttpContext httpContext)"]} 
 </msg>
<msg timestamp="20231130 16:40:45.510" level="INFO">${resp} = &lt;Response [500]&gt;</msg>
<status status="PASS" starttime="20231130 16:40:45.058" endtime="20231130 16:40:45.510"></status>
</kw>
<kw name="Status Should Be" library="RequestsLibrary">
<doc>Fails if response status code is different than the expected.</doc>
<arguments>
<arg>${statuscode}</arg>
<arg>${resp}</arg>
</arguments>
<msg timestamp="20231130 16:40:45.513" level="FAIL">Url: http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=10&amp;PageNumber=1&amp;PageSize=10 Expected status: 500 != 200</msg>
<status status="FAIL" starttime="20231130 16:40:45.510" endtime="20231130 16:40:45.513"></status>
</kw>
<status status="FAIL" starttime="20231130 16:40:45.057" endtime="20231130 16:40:45.516"></status>
</kw>
<status status="FAIL" starttime="20231130 16:40:45.056" endtime="20231130 16:40:45.516"></status>
</kw>
<status status="FAIL" starttime="20231130 16:40:45.052" endtime="20231130 16:40:45.516"></status>
</kw>
<tags>
<tag>regression</tag>
<tag>smoke</tag>
</tags>
<status status="FAIL" starttime="20231130 16:40:45.050" endtime="20231130 16:40:45.516" critical="yes">Url: http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=10&amp;PageNumber=1&amp;PageSize=10 Expected status: 500 != 200</status>
</test>
<test id="s1-s1-t2" name="verify get claims">
<kw name="Get_All_Submitted_Claims">
<arguments>
<arg>http://claimsapi-qc.rasan.co/</arg>
<arg>/api/Claim/Claims?Status=11&amp;PageNumber=1&amp;PageSize=10</arg>
<arg>200</arg>
<arg>["model"]["data"]["apiErrorOutputDTO"]["errorCode"]</arg>
<arg>1</arg>
</arguments>
<kw name="Create API session" library="API_Preferences">
<arguments>
<arg>${URL}</arg>
</arguments>
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>4</arg>
<arg>[NUMBERS]</arg>
</arguments>
<assign>
<var>${randomNumber}</var>
</assign>
<msg timestamp="20231130 16:40:45.520" level="INFO">${randomNumber} = 5949</msg>
<status status="PASS" starttime="20231130 16:40:45.520" endtime="20231130 16:40:45.520"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>session_${randomNumber}</arg>
</arguments>
<assign>
<var>${sessionName}</var>
</assign>
<msg timestamp="20231130 16:40:45.521" level="INFO">${sessionName} = session_5949</msg>
<status status="PASS" starttime="20231130 16:40:45.520" endtime="20231130 16:40:45.521"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${sessionName}</arg>
</arguments>
<msg timestamp="20231130 16:40:45.521" level="INFO">${sessionName} = session_5949</msg>
<status status="PASS" starttime="20231130 16:40:45.521" endtime="20231130 16:40:45.521"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${Base_Url}</arg>
<arg>timeout=30</arg>
<arg>disable_warnings=1</arg>
</arguments>
<msg timestamp="20231130 16:40:45.521" level="INFO">Creating Session using : alias=session_5949, url=http://claimsapi-qc.rasan.co/, headers={},                     cookies={}, auth=None, timeout=30, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20231130 16:40:45.521" endtime="20231130 16:40:45.522"></status>
</kw>
<status status="PASS" starttime="20231130 16:40:45.519" endtime="20231130 16:40:45.522"></status>
</kw>
<kw name="Get Request claim" library="API_Preferences">
<arguments>
<arg>${sessionName}</arg>
<arg>${URI}</arg>
<arg>${StatusCode}</arg>
<arg>${actual}</arg>
<arg>${Expected}</arg>
<arg>${RandomData}</arg>
</arguments>
<kw name="Get Request using data Driven Structure" library="API_Preferences">
<doc>Get request with DataDriven structure</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${Url}</arg>
<arg>${StatusCode}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20231130 16:40:45.523" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20231130 16:40:45.523" endtime="20231130 16:40:45.523"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>*DEPRECATED* Please use `GET On Session` instead.</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${URI}</arg>
<arg>headers=${headers}</arg>
<arg>timeout=10</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20231130 16:40:45.523" level="WARN">Keyword 'RequestsLibrary.Get Request' is deprecated. Please use `GET On Session` instead.</msg>
<msg timestamp="20231130 16:40:45.934" level="INFO">GET Request : url=http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=11&amp;PageNumber=1&amp;PageSize=10 
 path_url=/api/Claim/Claims?Status=11&amp;PageNumber=1&amp;PageSize=10 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
 body=None 
 </msg>
<msg timestamp="20231130 16:40:45.935" level="INFO">GET Response : url=http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=11&amp;PageNumber=1&amp;PageSize=10 
 status=500, reason=Internal Server Error 
 headers={'Server': 'nginx/1.25.1', 'Date': 'Thu, 30 Nov 2023 14:42:16 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive'} 
 body={"traceId":"ba8bcba2-e454-43bf-a358-d2c39cca1cb3","errorCode":null,"errors":["System.NotSupportedException: Serialization and deserialization of 'System.IntPtr' instances are not supported. Path: $.model.exception.TargetSite.MethodHandle.Value.\n ---&gt; System.NotSupportedException: Serialization and deserialization of 'System.IntPtr' instances are not supported.\n   at System.Text.Json.Serialization.Converters.UnsupportedTypeConverter`1.Write(Utf8JsonWriter writer, T value, JsonSerializerOptions options)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   --- End of inner exception stack trace ---\n   at System.Text.Json.ThrowHelper.ThrowNotSupportedException(WriteStack&amp; state, NotSupportedException ex)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCoreAsObject(Utf8JsonWriter writer, Object value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.JsonSerializer.WriteCore[TValue](JsonConverter jsonConverter, Utf8JsonWriter writer, TValue&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeNextResultFilterAsync&gt;g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultFilters()\n--- End of stack trace from previous location ---\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeFilterPipelineAsync&gt;g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Logged|17_1(ResourceInvoker invoker)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Logged|17_1(ResourceInvoker invoker)\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.&lt;Invoke&gt;g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\n   at InsurTech.Core.Api.Infrastructure.Middlewares.IdentityMiddleware.InvokeAsync(HttpContext httpContext)\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\n   at InsurTech.Core.Api.Infrastructure.Middlewares.ExceptionMiddleware.InvokeAsync(HttpContext httpContext)"]} 
 </msg>
<msg timestamp="20231130 16:40:45.935" level="INFO">${resp} = &lt;Response [500]&gt;</msg>
<status status="PASS" starttime="20231130 16:40:45.523" endtime="20231130 16:40:45.935"></status>
</kw>
<kw name="Status Should Be" library="RequestsLibrary">
<doc>Fails if response status code is different than the expected.</doc>
<arguments>
<arg>${statuscode}</arg>
<arg>${resp}</arg>
</arguments>
<msg timestamp="20231130 16:40:45.937" level="FAIL">Url: http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=11&amp;PageNumber=1&amp;PageSize=10 Expected status: 500 != 200</msg>
<status status="FAIL" starttime="20231130 16:40:45.936" endtime="20231130 16:40:45.937"></status>
</kw>
<status status="FAIL" starttime="20231130 16:40:45.522" endtime="20231130 16:40:45.939"></status>
</kw>
<status status="FAIL" starttime="20231130 16:40:45.522" endtime="20231130 16:40:45.940"></status>
</kw>
<status status="FAIL" starttime="20231130 16:40:45.519" endtime="20231130 16:40:45.940"></status>
</kw>
<tags>
<tag>regression</tag>
<tag>smoke</tag>
</tags>
<status status="FAIL" starttime="20231130 16:40:45.518" endtime="20231130 16:40:45.940" critical="yes">Url: http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=11&amp;PageNumber=1&amp;PageSize=10 Expected status: 500 != 200</status>
</test>
<test id="s1-s1-t3" name="verify get claims">
<kw name="Get_All_Submitted_Claims">
<arguments>
<arg>http://claimsapi-qc.rasan.co/</arg>
<arg>/api/Claim/Claims?Status=12&amp;PageNumber=1&amp;PageSize=10</arg>
<arg>200</arg>
<arg>["model"]["data"]["apiErrorOutputDTO"]["errorCode"]</arg>
<arg>1</arg>
</arguments>
<kw name="Create API session" library="API_Preferences">
<arguments>
<arg>${URL}</arg>
</arguments>
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>4</arg>
<arg>[NUMBERS]</arg>
</arguments>
<assign>
<var>${randomNumber}</var>
</assign>
<msg timestamp="20231130 16:40:45.945" level="INFO">${randomNumber} = 6715</msg>
<status status="PASS" starttime="20231130 16:40:45.944" endtime="20231130 16:40:45.945"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>session_${randomNumber}</arg>
</arguments>
<assign>
<var>${sessionName}</var>
</assign>
<msg timestamp="20231130 16:40:45.945" level="INFO">${sessionName} = session_6715</msg>
<status status="PASS" starttime="20231130 16:40:45.945" endtime="20231130 16:40:45.945"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${sessionName}</arg>
</arguments>
<msg timestamp="20231130 16:40:45.946" level="INFO">${sessionName} = session_6715</msg>
<status status="PASS" starttime="20231130 16:40:45.945" endtime="20231130 16:40:45.946"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${Base_Url}</arg>
<arg>timeout=30</arg>
<arg>disable_warnings=1</arg>
</arguments>
<msg timestamp="20231130 16:40:45.946" level="INFO">Creating Session using : alias=session_6715, url=http://claimsapi-qc.rasan.co/, headers={},                     cookies={}, auth=None, timeout=30, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20231130 16:40:45.946" endtime="20231130 16:40:45.946"></status>
</kw>
<status status="PASS" starttime="20231130 16:40:45.944" endtime="20231130 16:40:45.946"></status>
</kw>
<kw name="Get Request claim" library="API_Preferences">
<arguments>
<arg>${sessionName}</arg>
<arg>${URI}</arg>
<arg>${StatusCode}</arg>
<arg>${actual}</arg>
<arg>${Expected}</arg>
<arg>${RandomData}</arg>
</arguments>
<kw name="Get Request using data Driven Structure" library="API_Preferences">
<doc>Get request with DataDriven structure</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${Url}</arg>
<arg>${StatusCode}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20231130 16:40:45.949" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20231130 16:40:45.948" endtime="20231130 16:40:45.949"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>*DEPRECATED* Please use `GET On Session` instead.</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${URI}</arg>
<arg>headers=${headers}</arg>
<arg>timeout=10</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20231130 16:40:45.949" level="WARN">Keyword 'RequestsLibrary.Get Request' is deprecated. Please use `GET On Session` instead.</msg>
<msg timestamp="20231130 16:40:46.452" level="INFO">GET Request : url=http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=12&amp;PageNumber=1&amp;PageSize=10 
 path_url=/api/Claim/Claims?Status=12&amp;PageNumber=1&amp;PageSize=10 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
 body=None 
 </msg>
<msg timestamp="20231130 16:40:46.452" level="INFO">GET Response : url=http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=12&amp;PageNumber=1&amp;PageSize=10 
 status=500, reason=Internal Server Error 
 headers={'Server': 'nginx/1.25.1', 'Date': 'Thu, 30 Nov 2023 14:42:16 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive'} 
 body={"traceId":"676db781-bc63-42f3-a5fa-0b4d55afffef","errorCode":null,"errors":["System.NotSupportedException: Serialization and deserialization of 'System.IntPtr' instances are not supported. Path: $.model.exception.TargetSite.MethodHandle.Value.\n ---&gt; System.NotSupportedException: Serialization and deserialization of 'System.IntPtr' instances are not supported.\n   at System.Text.Json.Serialization.Converters.UnsupportedTypeConverter`1.Write(Utf8JsonWriter writer, T value, JsonSerializerOptions options)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   --- End of inner exception stack trace ---\n   at System.Text.Json.ThrowHelper.ThrowNotSupportedException(WriteStack&amp; state, NotSupportedException ex)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCoreAsObject(Utf8JsonWriter writer, Object value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.JsonSerializer.WriteCore[TValue](JsonConverter jsonConverter, Utf8JsonWriter writer, TValue&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeNextResultFilterAsync&gt;g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultFilters()\n--- End of stack trace from previous location ---\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeFilterPipelineAsync&gt;g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Logged|17_1(ResourceInvoker invoker)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Logged|17_1(ResourceInvoker invoker)\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.&lt;Invoke&gt;g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\n   at InsurTech.Core.Api.Infrastructure.Middlewares.IdentityMiddleware.InvokeAsync(HttpContext httpContext)\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\n   at InsurTech.Core.Api.Infrastructure.Middlewares.ExceptionMiddleware.InvokeAsync(HttpContext httpContext)"]} 
 </msg>
<msg timestamp="20231130 16:40:46.453" level="INFO">${resp} = &lt;Response [500]&gt;</msg>
<status status="PASS" starttime="20231130 16:40:45.949" endtime="20231130 16:40:46.453"></status>
</kw>
<kw name="Status Should Be" library="RequestsLibrary">
<doc>Fails if response status code is different than the expected.</doc>
<arguments>
<arg>${statuscode}</arg>
<arg>${resp}</arg>
</arguments>
<msg timestamp="20231130 16:40:46.454" level="FAIL">Url: http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=12&amp;PageNumber=1&amp;PageSize=10 Expected status: 500 != 200</msg>
<status status="FAIL" starttime="20231130 16:40:46.453" endtime="20231130 16:40:46.455"></status>
</kw>
<status status="FAIL" starttime="20231130 16:40:45.948" endtime="20231130 16:40:46.458"></status>
</kw>
<status status="FAIL" starttime="20231130 16:40:45.946" endtime="20231130 16:40:46.458"></status>
</kw>
<status status="FAIL" starttime="20231130 16:40:45.943" endtime="20231130 16:40:46.458"></status>
</kw>
<tags>
<tag>regression</tag>
<tag>smoke</tag>
</tags>
<status status="FAIL" starttime="20231130 16:40:45.941" endtime="20231130 16:40:46.459" critical="yes">Url: http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=12&amp;PageNumber=1&amp;PageSize=10 Expected status: 500 != 200</status>
</test>
<test id="s1-s1-t4" name="verify get claims">
<kw name="Get_All_Submitted_Claims">
<arguments>
<arg>http://claimsapi-qc.rasan.co/</arg>
<arg>/api/Claim/Claims?Status=16&amp;PageNumber=1&amp;PageSize=10</arg>
<arg>200</arg>
<arg>["model"]["data"]["apiErrorOutputDTO"]["errorCode"]</arg>
<arg>1</arg>
</arguments>
<kw name="Create API session" library="API_Preferences">
<arguments>
<arg>${URL}</arg>
</arguments>
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>4</arg>
<arg>[NUMBERS]</arg>
</arguments>
<assign>
<var>${randomNumber}</var>
</assign>
<msg timestamp="20231130 16:40:46.465" level="INFO">${randomNumber} = 4516</msg>
<status status="PASS" starttime="20231130 16:40:46.465" endtime="20231130 16:40:46.465"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>session_${randomNumber}</arg>
</arguments>
<assign>
<var>${sessionName}</var>
</assign>
<msg timestamp="20231130 16:40:46.466" level="INFO">${sessionName} = session_4516</msg>
<status status="PASS" starttime="20231130 16:40:46.465" endtime="20231130 16:40:46.466"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${sessionName}</arg>
</arguments>
<msg timestamp="20231130 16:40:46.466" level="INFO">${sessionName} = session_4516</msg>
<status status="PASS" starttime="20231130 16:40:46.466" endtime="20231130 16:40:46.466"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${Base_Url}</arg>
<arg>timeout=30</arg>
<arg>disable_warnings=1</arg>
</arguments>
<msg timestamp="20231130 16:40:46.467" level="INFO">Creating Session using : alias=session_4516, url=http://claimsapi-qc.rasan.co/, headers={},                     cookies={}, auth=None, timeout=30, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20231130 16:40:46.466" endtime="20231130 16:40:46.467"></status>
</kw>
<status status="PASS" starttime="20231130 16:40:46.464" endtime="20231130 16:40:46.467"></status>
</kw>
<kw name="Get Request claim" library="API_Preferences">
<arguments>
<arg>${sessionName}</arg>
<arg>${URI}</arg>
<arg>${StatusCode}</arg>
<arg>${actual}</arg>
<arg>${Expected}</arg>
<arg>${RandomData}</arg>
</arguments>
<kw name="Get Request using data Driven Structure" library="API_Preferences">
<doc>Get request with DataDriven structure</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${Url}</arg>
<arg>${StatusCode}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20231130 16:40:46.470" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20231130 16:40:46.469" endtime="20231130 16:40:46.470"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>*DEPRECATED* Please use `GET On Session` instead.</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${URI}</arg>
<arg>headers=${headers}</arg>
<arg>timeout=10</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20231130 16:40:46.470" level="WARN">Keyword 'RequestsLibrary.Get Request' is deprecated. Please use `GET On Session` instead.</msg>
<msg timestamp="20231130 16:40:47.020" level="INFO">GET Request : url=http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=16&amp;PageNumber=1&amp;PageSize=10 
 path_url=/api/Claim/Claims?Status=16&amp;PageNumber=1&amp;PageSize=10 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
 body=None 
 </msg>
<msg timestamp="20231130 16:40:47.020" level="INFO">GET Response : url=http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=16&amp;PageNumber=1&amp;PageSize=10 
 status=500, reason=Internal Server Error 
 headers={'Server': 'nginx/1.25.1', 'Date': 'Thu, 30 Nov 2023 14:42:17 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive'} 
 body={"traceId":"98729582-c0cd-47b3-b8f9-b9c6e8960b19","errorCode":null,"errors":["System.NotSupportedException: Serialization and deserialization of 'System.IntPtr' instances are not supported. Path: $.model.exception.TargetSite.MethodHandle.Value.\n ---&gt; System.NotSupportedException: Serialization and deserialization of 'System.IntPtr' instances are not supported.\n   at System.Text.Json.Serialization.Converters.UnsupportedTypeConverter`1.Write(Utf8JsonWriter writer, T value, JsonSerializerOptions options)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   --- End of inner exception stack trace ---\n   at System.Text.Json.ThrowHelper.ThrowNotSupportedException(WriteStack&amp; state, NotSupportedException ex)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCoreAsObject(Utf8JsonWriter writer, Object value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.JsonSerializer.WriteCore[TValue](JsonConverter jsonConverter, Utf8JsonWriter writer, TValue&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeNextResultFilterAsync&gt;g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultFilters()\n--- End of stack trace from previous location ---\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeFilterPipelineAsync&gt;g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Logged|17_1(ResourceInvoker invoker)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Logged|17_1(ResourceInvoker invoker)\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.&lt;Invoke&gt;g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\n   at InsurTech.Core.Api.Infrastructure.Middlewares.IdentityMiddleware.InvokeAsync(HttpContext httpContext)\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\n   at InsurTech.Core.Api.Infrastructure.Middlewares.ExceptionMiddleware.InvokeAsync(HttpContext httpContext)"]} 
 </msg>
<msg timestamp="20231130 16:40:47.020" level="INFO">${resp} = &lt;Response [500]&gt;</msg>
<status status="PASS" starttime="20231130 16:40:46.470" endtime="20231130 16:40:47.020"></status>
</kw>
<kw name="Status Should Be" library="RequestsLibrary">
<doc>Fails if response status code is different than the expected.</doc>
<arguments>
<arg>${statuscode}</arg>
<arg>${resp}</arg>
</arguments>
<msg timestamp="20231130 16:40:47.022" level="FAIL">Url: http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=16&amp;PageNumber=1&amp;PageSize=10 Expected status: 500 != 200</msg>
<status status="FAIL" starttime="20231130 16:40:47.021" endtime="20231130 16:40:47.022"></status>
</kw>
<status status="FAIL" starttime="20231130 16:40:46.468" endtime="20231130 16:40:47.024"></status>
</kw>
<status status="FAIL" starttime="20231130 16:40:46.467" endtime="20231130 16:40:47.024"></status>
</kw>
<status status="FAIL" starttime="20231130 16:40:46.464" endtime="20231130 16:40:47.024"></status>
</kw>
<tags>
<tag>regression</tag>
<tag>smoke</tag>
</tags>
<status status="FAIL" starttime="20231130 16:40:46.463" endtime="20231130 16:40:47.025" critical="yes">Url: http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=16&amp;PageNumber=1&amp;PageSize=10 Expected status: 500 != 200</status>
</test>
<test id="s1-s1-t5" name="verify get claims">
<kw name="Get_All_Submitted_Claims">
<arguments>
<arg>http://claimsapi-qc.rasan.co/</arg>
<arg>/api/Claim/Claims?Status=30&amp;PageNumber=1&amp;PageSize=11</arg>
<arg>200</arg>
<arg>["model"]["data"]["apiErrorOutputDTO"]["errorCode"]</arg>
<arg>185</arg>
</arguments>
<kw name="Create API session" library="API_Preferences">
<arguments>
<arg>${URL}</arg>
</arguments>
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>4</arg>
<arg>[NUMBERS]</arg>
</arguments>
<assign>
<var>${randomNumber}</var>
</assign>
<msg timestamp="20231130 16:40:47.028" level="INFO">${randomNumber} = 6757</msg>
<status status="PASS" starttime="20231130 16:40:47.028" endtime="20231130 16:40:47.028"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>session_${randomNumber}</arg>
</arguments>
<assign>
<var>${sessionName}</var>
</assign>
<msg timestamp="20231130 16:40:47.029" level="INFO">${sessionName} = session_6757</msg>
<status status="PASS" starttime="20231130 16:40:47.028" endtime="20231130 16:40:47.029"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${sessionName}</arg>
</arguments>
<msg timestamp="20231130 16:40:47.029" level="INFO">${sessionName} = session_6757</msg>
<status status="PASS" starttime="20231130 16:40:47.029" endtime="20231130 16:40:47.029"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${Base_Url}</arg>
<arg>timeout=30</arg>
<arg>disable_warnings=1</arg>
</arguments>
<msg timestamp="20231130 16:40:47.030" level="INFO">Creating Session using : alias=session_6757, url=http://claimsapi-qc.rasan.co/, headers={},                     cookies={}, auth=None, timeout=30, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20231130 16:40:47.030" endtime="20231130 16:40:47.030"></status>
</kw>
<status status="PASS" starttime="20231130 16:40:47.027" endtime="20231130 16:40:47.030"></status>
</kw>
<kw name="Get Request claim" library="API_Preferences">
<arguments>
<arg>${sessionName}</arg>
<arg>${URI}</arg>
<arg>${StatusCode}</arg>
<arg>${actual}</arg>
<arg>${Expected}</arg>
<arg>${RandomData}</arg>
</arguments>
<kw name="Get Request using data Driven Structure" library="API_Preferences">
<doc>Get request with DataDriven structure</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${Url}</arg>
<arg>${StatusCode}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20231130 16:40:47.033" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20231130 16:40:47.033" endtime="20231130 16:40:47.033"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>*DEPRECATED* Please use `GET On Session` instead.</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${URI}</arg>
<arg>headers=${headers}</arg>
<arg>timeout=10</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20231130 16:40:47.033" level="WARN">Keyword 'RequestsLibrary.Get Request' is deprecated. Please use `GET On Session` instead.</msg>
<msg timestamp="20231130 16:40:47.580" level="INFO">GET Request : url=http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=30&amp;PageNumber=1&amp;PageSize=11 
 path_url=/api/Claim/Claims?Status=30&amp;PageNumber=1&amp;PageSize=11 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
 body=None 
 </msg>
<msg timestamp="20231130 16:40:47.580" level="INFO">GET Response : url=http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=30&amp;PageNumber=1&amp;PageSize=11 
 status=500, reason=Internal Server Error 
 headers={'Server': 'nginx/1.25.1', 'Date': 'Thu, 30 Nov 2023 14:42:17 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive'} 
 body={"traceId":"c6a3572a-6dfa-447f-b053-b3940f7e917d","errorCode":null,"errors":["System.NotSupportedException: Serialization and deserialization of 'System.IntPtr' instances are not supported. Path: $.model.exception.TargetSite.MethodHandle.Value.\n ---&gt; System.NotSupportedException: Serialization and deserialization of 'System.IntPtr' instances are not supported.\n   at System.Text.Json.Serialization.Converters.UnsupportedTypeConverter`1.Write(Utf8JsonWriter writer, T value, JsonSerializerOptions options)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   --- End of inner exception stack trace ---\n   at System.Text.Json.ThrowHelper.ThrowNotSupportedException(WriteStack&amp; state, NotSupportedException ex)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCoreAsObject(Utf8JsonWriter writer, Object value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.JsonSerializer.WriteCore[TValue](JsonConverter jsonConverter, Utf8JsonWriter writer, TValue&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeNextResultFilterAsync&gt;g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultFilters()\n--- End of stack trace from previous location ---\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeFilterPipelineAsync&gt;g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Logged|17_1(ResourceInvoker invoker)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Logged|17_1(ResourceInvoker invoker)\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.&lt;Invoke&gt;g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\n   at InsurTech.Core.Api.Infrastructure.Middlewares.IdentityMiddleware.InvokeAsync(HttpContext httpContext)\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\n   at InsurTech.Core.Api.Infrastructure.Middlewares.ExceptionMiddleware.InvokeAsync(HttpContext httpContext)"]} 
 </msg>
<msg timestamp="20231130 16:40:47.581" level="INFO">${resp} = &lt;Response [500]&gt;</msg>
<status status="PASS" starttime="20231130 16:40:47.033" endtime="20231130 16:40:47.581"></status>
</kw>
<kw name="Status Should Be" library="RequestsLibrary">
<doc>Fails if response status code is different than the expected.</doc>
<arguments>
<arg>${statuscode}</arg>
<arg>${resp}</arg>
</arguments>
<msg timestamp="20231130 16:40:47.582" level="FAIL">Url: http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=30&amp;PageNumber=1&amp;PageSize=11 Expected status: 500 != 200</msg>
<status status="FAIL" starttime="20231130 16:40:47.581" endtime="20231130 16:40:47.582"></status>
</kw>
<status status="FAIL" starttime="20231130 16:40:47.031" endtime="20231130 16:40:47.583"></status>
</kw>
<status status="FAIL" starttime="20231130 16:40:47.031" endtime="20231130 16:40:47.584"></status>
</kw>
<status status="FAIL" starttime="20231130 16:40:47.027" endtime="20231130 16:40:47.584"></status>
</kw>
<tags>
<tag>regression</tag>
<tag>smoke</tag>
</tags>
<status status="FAIL" starttime="20231130 16:40:47.026" endtime="20231130 16:40:47.584" critical="yes">Url: http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=30&amp;PageNumber=1&amp;PageSize=11 Expected status: 500 != 200</status>
</test>
<test id="s1-s1-t6" name="verify get claims">
<kw name="Get_All_Submitted_Claims">
<arguments>
<arg>http://claimsapi-qc.rasan.co/</arg>
<arg>/api/Claim/Claims?PageNumber=1&amp;PageSize=10&amp;ChannelId=2</arg>
<arg>200</arg>
<arg>["model"]["data"]["apiErrorOutputDTO"]["errorCode"]</arg>
<arg>185</arg>
</arguments>
<kw name="Create API session" library="API_Preferences">
<arguments>
<arg>${URL}</arg>
</arguments>
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>4</arg>
<arg>[NUMBERS]</arg>
</arguments>
<assign>
<var>${randomNumber}</var>
</assign>
<msg timestamp="20231130 16:40:47.587" level="INFO">${randomNumber} = 8764</msg>
<status status="PASS" starttime="20231130 16:40:47.587" endtime="20231130 16:40:47.587"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>session_${randomNumber}</arg>
</arguments>
<assign>
<var>${sessionName}</var>
</assign>
<msg timestamp="20231130 16:40:47.588" level="INFO">${sessionName} = session_8764</msg>
<status status="PASS" starttime="20231130 16:40:47.587" endtime="20231130 16:40:47.588"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${sessionName}</arg>
</arguments>
<msg timestamp="20231130 16:40:47.588" level="INFO">${sessionName} = session_8764</msg>
<status status="PASS" starttime="20231130 16:40:47.588" endtime="20231130 16:40:47.588"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${Base_Url}</arg>
<arg>timeout=30</arg>
<arg>disable_warnings=1</arg>
</arguments>
<msg timestamp="20231130 16:40:47.589" level="INFO">Creating Session using : alias=session_8764, url=http://claimsapi-qc.rasan.co/, headers={},                     cookies={}, auth=None, timeout=30, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20231130 16:40:47.589" endtime="20231130 16:40:47.589"></status>
</kw>
<status status="PASS" starttime="20231130 16:40:47.586" endtime="20231130 16:40:47.589"></status>
</kw>
<kw name="Get Request claim" library="API_Preferences">
<arguments>
<arg>${sessionName}</arg>
<arg>${URI}</arg>
<arg>${StatusCode}</arg>
<arg>${actual}</arg>
<arg>${Expected}</arg>
<arg>${RandomData}</arg>
</arguments>
<kw name="Get Request using data Driven Structure" library="API_Preferences">
<doc>Get request with DataDriven structure</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${Url}</arg>
<arg>${StatusCode}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20231130 16:40:47.591" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20231130 16:40:47.590" endtime="20231130 16:40:47.591"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>*DEPRECATED* Please use `GET On Session` instead.</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${URI}</arg>
<arg>headers=${headers}</arg>
<arg>timeout=10</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20231130 16:40:47.591" level="WARN">Keyword 'RequestsLibrary.Get Request' is deprecated. Please use `GET On Session` instead.</msg>
<msg timestamp="20231130 16:40:48.072" level="INFO">GET Request : url=http://claimsapi-qc.rasan.co/api/Claim/Claims?PageNumber=1&amp;PageSize=10&amp;ChannelId=2 
 path_url=/api/Claim/Claims?PageNumber=1&amp;PageSize=10&amp;ChannelId=2 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
 body=None 
 </msg>
<msg timestamp="20231130 16:40:48.072" level="INFO">GET Response : url=http://claimsapi-qc.rasan.co/api/Claim/Claims?PageNumber=1&amp;PageSize=10&amp;ChannelId=2 
 status=500, reason=Internal Server Error 
 headers={'Server': 'nginx/1.25.1', 'Date': 'Thu, 30 Nov 2023 14:42:18 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive'} 
 body={"traceId":"b09196e4-bd34-475d-bede-3450d4960ef6","errorCode":null,"errors":["System.NotSupportedException: Serialization and deserialization of 'System.IntPtr' instances are not supported. Path: $.model.exception.TargetSite.MethodHandle.Value.\n ---&gt; System.NotSupportedException: Serialization and deserialization of 'System.IntPtr' instances are not supported.\n   at System.Text.Json.Serialization.Converters.UnsupportedTypeConverter`1.Write(Utf8JsonWriter writer, T value, JsonSerializerOptions options)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   --- End of inner exception stack trace ---\n   at System.Text.Json.ThrowHelper.ThrowNotSupportedException(WriteStack&amp; state, NotSupportedException ex)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCoreAsObject(Utf8JsonWriter writer, Object value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.JsonSerializer.WriteCore[TValue](JsonConverter jsonConverter, Utf8JsonWriter writer, TValue&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeNextResultFilterAsync&gt;g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultFilters()\n--- End of stack trace from previous location ---\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeFilterPipelineAsync&gt;g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Logged|17_1(ResourceInvoker invoker)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Logged|17_1(ResourceInvoker invoker)\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.&lt;Invoke&gt;g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\n   at InsurTech.Core.Api.Infrastructure.Middlewares.IdentityMiddleware.InvokeAsync(HttpContext httpContext)\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\n   at InsurTech.Core.Api.Infrastructure.Middlewares.ExceptionMiddleware.InvokeAsync(HttpContext httpContext)"]} 
 </msg>
<msg timestamp="20231130 16:40:48.073" level="INFO">${resp} = &lt;Response [500]&gt;</msg>
<status status="PASS" starttime="20231130 16:40:47.591" endtime="20231130 16:40:48.074"></status>
</kw>
<kw name="Status Should Be" library="RequestsLibrary">
<doc>Fails if response status code is different than the expected.</doc>
<arguments>
<arg>${statuscode}</arg>
<arg>${resp}</arg>
</arguments>
<msg timestamp="20231130 16:40:48.076" level="FAIL">Url: http://claimsapi-qc.rasan.co/api/Claim/Claims?PageNumber=1&amp;PageSize=10&amp;ChannelId=2 Expected status: 500 != 200</msg>
<status status="FAIL" starttime="20231130 16:40:48.074" endtime="20231130 16:40:48.077"></status>
</kw>
<status status="FAIL" starttime="20231130 16:40:47.590" endtime="20231130 16:40:48.081"></status>
</kw>
<status status="FAIL" starttime="20231130 16:40:47.590" endtime="20231130 16:40:48.082"></status>
</kw>
<status status="FAIL" starttime="20231130 16:40:47.585" endtime="20231130 16:40:48.082"></status>
</kw>
<tags>
<tag>regression</tag>
<tag>smoke</tag>
</tags>
<status status="FAIL" starttime="20231130 16:40:47.584" endtime="20231130 16:40:48.083" critical="yes">Url: http://claimsapi-qc.rasan.co/api/Claim/Claims?PageNumber=1&amp;PageSize=10&amp;ChannelId=2 Expected status: 500 != 200</status>
</test>
<test id="s1-s1-t7" name="verify get claims">
<kw name="Get_All_Submitted_Claims">
<arguments>
<arg>http://claimsapi-qc.rasan.co/</arg>
<arg>/api/Claim/Claims?SubmissionDateFrom=01%2F01%2F2023&amp;SubmissionDateTo=01%2F02%2F2023&amp;PageNumber=1&amp;PageSize=10</arg>
<arg>200</arg>
<arg>["model"]["data"]["apiErrorOutputDTO"]["errorCode"]</arg>
<arg>185</arg>
</arguments>
<kw name="Create API session" library="API_Preferences">
<arguments>
<arg>${URL}</arg>
</arguments>
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>4</arg>
<arg>[NUMBERS]</arg>
</arguments>
<assign>
<var>${randomNumber}</var>
</assign>
<msg timestamp="20231130 16:40:48.089" level="INFO">${randomNumber} = 5620</msg>
<status status="PASS" starttime="20231130 16:40:48.088" endtime="20231130 16:40:48.089"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>session_${randomNumber}</arg>
</arguments>
<assign>
<var>${sessionName}</var>
</assign>
<msg timestamp="20231130 16:40:48.090" level="INFO">${sessionName} = session_5620</msg>
<status status="PASS" starttime="20231130 16:40:48.089" endtime="20231130 16:40:48.090"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${sessionName}</arg>
</arguments>
<msg timestamp="20231130 16:40:48.091" level="INFO">${sessionName} = session_5620</msg>
<status status="PASS" starttime="20231130 16:40:48.090" endtime="20231130 16:40:48.091"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${Base_Url}</arg>
<arg>timeout=30</arg>
<arg>disable_warnings=1</arg>
</arguments>
<msg timestamp="20231130 16:40:48.092" level="INFO">Creating Session using : alias=session_5620, url=http://claimsapi-qc.rasan.co/, headers={},                     cookies={}, auth=None, timeout=30, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20231130 16:40:48.091" endtime="20231130 16:40:48.092"></status>
</kw>
<status status="PASS" starttime="20231130 16:40:48.088" endtime="20231130 16:40:48.092"></status>
</kw>
<kw name="Get Request claim" library="API_Preferences">
<arguments>
<arg>${sessionName}</arg>
<arg>${URI}</arg>
<arg>${StatusCode}</arg>
<arg>${actual}</arg>
<arg>${Expected}</arg>
<arg>${RandomData}</arg>
</arguments>
<kw name="Get Request using data Driven Structure" library="API_Preferences">
<doc>Get request with DataDriven structure</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${Url}</arg>
<arg>${StatusCode}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20231130 16:40:48.095" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20231130 16:40:48.095" endtime="20231130 16:40:48.095"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>*DEPRECATED* Please use `GET On Session` instead.</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${URI}</arg>
<arg>headers=${headers}</arg>
<arg>timeout=10</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20231130 16:40:48.096" level="WARN">Keyword 'RequestsLibrary.Get Request' is deprecated. Please use `GET On Session` instead.</msg>
<msg timestamp="20231130 16:40:48.763" level="INFO">GET Request : url=http://claimsapi-qc.rasan.co/api/Claim/Claims?SubmissionDateFrom=01%2F01%2F2023&amp;SubmissionDateTo=01%2F02%2F2023&amp;PageNumber=1&amp;PageSize=10 
 path_url=/api/Claim/Claims?SubmissionDateFrom=01%2F01%2F2023&amp;SubmissionDateTo=01%2F02%2F2023&amp;PageNumber=1&amp;PageSize=10 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
 body=None 
 </msg>
<msg timestamp="20231130 16:40:48.764" level="INFO">GET Response : url=http://claimsapi-qc.rasan.co/api/Claim/Claims?SubmissionDateFrom=01%2F01%2F2023&amp;SubmissionDateTo=01%2F02%2F2023&amp;PageNumber=1&amp;PageSize=10 
 status=500, reason=Internal Server Error 
 headers={'Server': 'nginx/1.25.1', 'Date': 'Thu, 30 Nov 2023 14:42:18 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive'} 
 body={"traceId":"dda2289d-61e3-4704-8297-2d20a12a49e9","errorCode":null,"errors":["System.NotSupportedException: Serialization and deserialization of 'System.IntPtr' instances are not supported. Path: $.model.exception.TargetSite.MethodHandle.Value.\n ---&gt; System.NotSupportedException: Serialization and deserialization of 'System.IntPtr' instances are not supported.\n   at System.Text.Json.Serialization.Converters.UnsupportedTypeConverter`1.Write(Utf8JsonWriter writer, T value, JsonSerializerOptions options)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   --- End of inner exception stack trace ---\n   at System.Text.Json.ThrowHelper.ThrowNotSupportedException(WriteStack&amp; state, NotSupportedException ex)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCoreAsObject(Utf8JsonWriter writer, Object value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.JsonSerializer.WriteCore[TValue](JsonConverter jsonConverter, Utf8JsonWriter writer, TValue&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeNextResultFilterAsync&gt;g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultFilters()\n--- End of stack trace from previous location ---\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeFilterPipelineAsync&gt;g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Logged|17_1(ResourceInvoker invoker)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Logged|17_1(ResourceInvoker invoker)\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.&lt;Invoke&gt;g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\n   at InsurTech.Core.Api.Infrastructure.Middlewares.IdentityMiddleware.InvokeAsync(HttpContext httpContext)\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\n   at InsurTech.Core.Api.Infrastructure.Middlewares.ExceptionMiddleware.InvokeAsync(HttpContext httpContext)"]} 
 </msg>
<msg timestamp="20231130 16:40:48.764" level="INFO">${resp} = &lt;Response [500]&gt;</msg>
<status status="PASS" starttime="20231130 16:40:48.095" endtime="20231130 16:40:48.764"></status>
</kw>
<kw name="Status Should Be" library="RequestsLibrary">
<doc>Fails if response status code is different than the expected.</doc>
<arguments>
<arg>${statuscode}</arg>
<arg>${resp}</arg>
</arguments>
<msg timestamp="20231130 16:40:48.766" level="FAIL">Url: http://claimsapi-qc.rasan.co/api/Claim/Claims?SubmissionDateFrom=01%2F01%2F2023&amp;SubmissionDateTo=01%2F02%2F2023&amp;PageNumber=1&amp;PageSize=10 Expected status: 500 != 200</msg>
<status status="FAIL" starttime="20231130 16:40:48.765" endtime="20231130 16:40:48.766"></status>
</kw>
<status status="FAIL" starttime="20231130 16:40:48.094" endtime="20231130 16:40:48.768"></status>
</kw>
<status status="FAIL" starttime="20231130 16:40:48.092" endtime="20231130 16:40:48.768"></status>
</kw>
<status status="FAIL" starttime="20231130 16:40:48.087" endtime="20231130 16:40:48.768"></status>
</kw>
<tags>
<tag>regression</tag>
<tag>smoke</tag>
</tags>
<status status="FAIL" starttime="20231130 16:40:48.084" endtime="20231130 16:40:48.768" critical="yes">Url: http://claimsapi-qc.rasan.co/api/Claim/Claims?SubmissionDateFrom=01%2F01%2F2023&amp;SubmissionDateTo=01%2F02%2F2023&amp;PageNumber=1&amp;PageSize=10 Expected status: 500 != 200</status>
</test>
<doc>Suite description</doc>
<status status="FAIL" starttime="20231130 16:40:21.524" endtime="20231130 16:40:48.769"></status>
</suite>
<status status="FAIL" starttime="20231130 16:40:21.503" endtime="20231130 16:40:48.772"></status>
</suite>
<statistics>
<total>
<stat pass="0" fail="7">Critical Tests</stat>
<stat pass="0" fail="7">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="7">regression</stat>
<stat pass="0" fail="7">smoke</stat>
</tag>
<suite>
<stat pass="0" fail="7" id="s1" name="Suites">Suites</stat>
<stat pass="0" fail="7" id="s1-s1" name="GetAllClaims">Suites.GetAllClaims</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20231130 16:40:45.059" level="WARN">Keyword 'RequestsLibrary.Get Request' is deprecated. Please use `GET On Session` instead.</msg>
<msg timestamp="20231130 16:40:45.517" level="WARN">Multiple test cases with name 'verify get claims' executed in test suite 'Suites.GetAllClaims'.</msg>
<msg timestamp="20231130 16:40:45.523" level="WARN">Keyword 'RequestsLibrary.Get Request' is deprecated. Please use `GET On Session` instead.</msg>
<msg timestamp="20231130 16:40:45.941" level="WARN">Multiple test cases with name 'verify get claims' executed in test suite 'Suites.GetAllClaims'.</msg>
<msg timestamp="20231130 16:40:45.949" level="WARN">Keyword 'RequestsLibrary.Get Request' is deprecated. Please use `GET On Session` instead.</msg>
<msg timestamp="20231130 16:40:46.460" level="WARN">Multiple test cases with name 'verify get claims' executed in test suite 'Suites.GetAllClaims'.</msg>
<msg timestamp="20231130 16:40:46.470" level="WARN">Keyword 'RequestsLibrary.Get Request' is deprecated. Please use `GET On Session` instead.</msg>
<msg timestamp="20231130 16:40:47.025" level="WARN">Multiple test cases with name 'verify get claims' executed in test suite 'Suites.GetAllClaims'.</msg>
<msg timestamp="20231130 16:40:47.033" level="WARN">Keyword 'RequestsLibrary.Get Request' is deprecated. Please use `GET On Session` instead.</msg>
<msg timestamp="20231130 16:40:47.584" level="WARN">Multiple test cases with name 'verify get claims' executed in test suite 'Suites.GetAllClaims'.</msg>
<msg timestamp="20231130 16:40:47.591" level="WARN">Keyword 'RequestsLibrary.Get Request' is deprecated. Please use `GET On Session` instead.</msg>
<msg timestamp="20231130 16:40:48.084" level="WARN">Multiple test cases with name 'verify get claims' executed in test suite 'Suites.GetAllClaims'.</msg>
<msg timestamp="20231130 16:40:48.096" level="WARN">Keyword 'RequestsLibrary.Get Request' is deprecated. Please use `GET On Session` instead.</msg>
</errors>
</robot>
