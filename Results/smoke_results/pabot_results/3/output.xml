<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.2.2 (Python 3.8.3 on win32)" generated="20231130 16:37:03.707" rpa="false">
<suite id="s1" name="Suites">
<suite id="s1-s1" name="GetAllClaims" source="C:\Users\AGebril\PycharmProjects\QC_Automation_Claim\Tests\GetAllClaims.robot">
<test id="s1-s1-t1" name="verify get claims">
<kw name="Get_All_Submitted_Claims">
<arguments>
<arg>http://claimsapi-qc.rasan.co/</arg>
<arg>/api/Claim/Claims?Status=10&amp;PageNumber=1&amp;PageSize=10</arg>
<arg>200</arg>
<arg>["model"]["data"]["apiErrorOutputDTO"]["errorCode"]</arg>
<arg>1</arg>
</arguments>
<kw name="Create API session" library="API_Preferences">
<arguments>
<arg>${URL}</arg>
</arguments>
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>4</arg>
<arg>[NUMBERS]</arg>
</arguments>
<assign>
<var>${randomNumber}</var>
</assign>
<msg timestamp="20231130 16:37:25.881" level="INFO">${randomNumber} = 3820</msg>
<status status="PASS" starttime="20231130 16:37:25.881" endtime="20231130 16:37:25.881"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>session_${randomNumber}</arg>
</arguments>
<assign>
<var>${sessionName}</var>
</assign>
<msg timestamp="20231130 16:37:25.882" level="INFO">${sessionName} = session_3820</msg>
<status status="PASS" starttime="20231130 16:37:25.881" endtime="20231130 16:37:25.882"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${sessionName}</arg>
</arguments>
<msg timestamp="20231130 16:37:25.882" level="INFO">${sessionName} = session_3820</msg>
<status status="PASS" starttime="20231130 16:37:25.882" endtime="20231130 16:37:25.882"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${Base_Url}</arg>
<arg>timeout=30</arg>
<arg>disable_warnings=1</arg>
</arguments>
<msg timestamp="20231130 16:37:25.883" level="INFO">Creating Session using : alias=session_3820, url=http://claimsapi-qc.rasan.co/, headers={},                     cookies={}, auth=None, timeout=30, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20231130 16:37:25.882" endtime="20231130 16:37:25.883"></status>
</kw>
<status status="PASS" starttime="20231130 16:37:25.881" endtime="20231130 16:37:25.883"></status>
</kw>
<kw name="Get Request claim" library="API_Preferences">
<arguments>
<arg>${sessionName}</arg>
<arg>${URI}</arg>
<arg>${StatusCode}</arg>
<arg>${actual}</arg>
<arg>${Expected}</arg>
<arg>${RandomData}</arg>
</arguments>
<kw name="Get Request using data Driven Structure" library="API_Preferences">
<doc>Get request with DataDriven structure</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${Url}</arg>
<arg>${StatusCode}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20231130 16:37:25.884" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20231130 16:37:25.884" endtime="20231130 16:37:25.884"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>*DEPRECATED* Please use `GET On Session` instead.</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${URI}</arg>
<arg>headers=${headers}</arg>
<arg>timeout=10</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20231130 16:37:25.885" level="WARN">Keyword 'RequestsLibrary.Get Request' is deprecated. Please use `GET On Session` instead.</msg>
<msg timestamp="20231130 16:37:26.403" level="INFO">GET Request : url=http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=10&amp;PageNumber=1&amp;PageSize=10 
 path_url=/api/Claim/Claims?Status=10&amp;PageNumber=1&amp;PageSize=10 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
 body=None 
 </msg>
<msg timestamp="20231130 16:37:26.403" level="INFO">GET Response : url=http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=10&amp;PageNumber=1&amp;PageSize=10 
 status=500, reason=Internal Server Error 
 headers={'Server': 'nginx/1.25.1', 'Date': 'Thu, 30 Nov 2023 14:38:56 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive'} 
 body={"traceId":"b6901109-6fd3-46a6-a272-4952911b2402","errorCode":null,"errors":["System.NotSupportedException: Serialization and deserialization of 'System.IntPtr' instances are not supported. Path: $.model.exception.TargetSite.MethodHandle.Value.\n ---&gt; System.NotSupportedException: Serialization and deserialization of 'System.IntPtr' instances are not supported.\n   at System.Text.Json.Serialization.Converters.UnsupportedTypeConverter`1.Write(Utf8JsonWriter writer, T value, JsonSerializerOptions options)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   --- End of inner exception stack trace ---\n   at System.Text.Json.ThrowHelper.ThrowNotSupportedException(WriteStack&amp; state, NotSupportedException ex)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCoreAsObject(Utf8JsonWriter writer, Object value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.JsonSerializer.WriteCore[TValue](JsonConverter jsonConverter, Utf8JsonWriter writer, TValue&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeNextResultFilterAsync&gt;g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultFilters()\n--- End of stack trace from previous location ---\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeFilterPipelineAsync&gt;g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Logged|17_1(ResourceInvoker invoker)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Logged|17_1(ResourceInvoker invoker)\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.&lt;Invoke&gt;g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\n   at InsurTech.Core.Api.Infrastructure.Middlewares.IdentityMiddleware.InvokeAsync(HttpContext httpContext)\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\n   at InsurTech.Core.Api.Infrastructure.Middlewares.ExceptionMiddleware.InvokeAsync(HttpContext httpContext)"]} 
 </msg>
<msg timestamp="20231130 16:37:26.404" level="INFO">${resp} = &lt;Response [500]&gt;</msg>
<status status="PASS" starttime="20231130 16:37:25.884" endtime="20231130 16:37:26.404"></status>
</kw>
<kw name="Status Should Be" library="RequestsLibrary">
<doc>Fails if response status code is different than the expected.</doc>
<arguments>
<arg>${statuscode}</arg>
<arg>${resp}</arg>
</arguments>
<msg timestamp="20231130 16:37:26.409" level="FAIL">Url: http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=10&amp;PageNumber=1&amp;PageSize=10 Expected status: 500 != 200</msg>
<status status="FAIL" starttime="20231130 16:37:26.405" endtime="20231130 16:37:26.410"></status>
</kw>
<status status="FAIL" starttime="20231130 16:37:25.884" endtime="20231130 16:37:26.413"></status>
</kw>
<status status="FAIL" starttime="20231130 16:37:25.883" endtime="20231130 16:37:26.413"></status>
</kw>
<status status="FAIL" starttime="20231130 16:37:25.880" endtime="20231130 16:37:26.414"></status>
</kw>
<tags>
<tag>regression</tag>
<tag>smoke</tag>
</tags>
<status status="FAIL" starttime="20231130 16:37:25.879" endtime="20231130 16:37:26.414" critical="yes">Url: http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=10&amp;PageNumber=1&amp;PageSize=10 Expected status: 500 != 200</status>
</test>
<test id="s1-s1-t2" name="verify get claims">
<kw name="Get_All_Submitted_Claims">
<arguments>
<arg>http://claimsapi-qc.rasan.co/</arg>
<arg>/api/Claim/Claims?Status=11&amp;PageNumber=1&amp;PageSize=10</arg>
<arg>200</arg>
<arg>["model"]["data"]["apiErrorOutputDTO"]["errorCode"]</arg>
<arg>1</arg>
</arguments>
<kw name="Create API session" library="API_Preferences">
<arguments>
<arg>${URL}</arg>
</arguments>
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>4</arg>
<arg>[NUMBERS]</arg>
</arguments>
<assign>
<var>${randomNumber}</var>
</assign>
<msg timestamp="20231130 16:37:26.422" level="INFO">${randomNumber} = 6614</msg>
<status status="PASS" starttime="20231130 16:37:26.422" endtime="20231130 16:37:26.422"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>session_${randomNumber}</arg>
</arguments>
<assign>
<var>${sessionName}</var>
</assign>
<msg timestamp="20231130 16:37:26.423" level="INFO">${sessionName} = session_6614</msg>
<status status="PASS" starttime="20231130 16:37:26.422" endtime="20231130 16:37:26.423"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${sessionName}</arg>
</arguments>
<msg timestamp="20231130 16:37:26.423" level="INFO">${sessionName} = session_6614</msg>
<status status="PASS" starttime="20231130 16:37:26.423" endtime="20231130 16:37:26.423"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${Base_Url}</arg>
<arg>timeout=30</arg>
<arg>disable_warnings=1</arg>
</arguments>
<msg timestamp="20231130 16:37:26.424" level="INFO">Creating Session using : alias=session_6614, url=http://claimsapi-qc.rasan.co/, headers={},                     cookies={}, auth=None, timeout=30, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20231130 16:37:26.423" endtime="20231130 16:37:26.424"></status>
</kw>
<status status="PASS" starttime="20231130 16:37:26.421" endtime="20231130 16:37:26.424"></status>
</kw>
<kw name="Get Request claim" library="API_Preferences">
<arguments>
<arg>${sessionName}</arg>
<arg>${URI}</arg>
<arg>${StatusCode}</arg>
<arg>${actual}</arg>
<arg>${Expected}</arg>
<arg>${RandomData}</arg>
</arguments>
<kw name="Get Request using data Driven Structure" library="API_Preferences">
<doc>Get request with DataDriven structure</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${Url}</arg>
<arg>${StatusCode}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20231130 16:37:26.426" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20231130 16:37:26.425" endtime="20231130 16:37:26.426"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>*DEPRECATED* Please use `GET On Session` instead.</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${URI}</arg>
<arg>headers=${headers}</arg>
<arg>timeout=10</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20231130 16:37:26.426" level="WARN">Keyword 'RequestsLibrary.Get Request' is deprecated. Please use `GET On Session` instead.</msg>
<msg timestamp="20231130 16:37:26.836" level="INFO">GET Request : url=http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=11&amp;PageNumber=1&amp;PageSize=10 
 path_url=/api/Claim/Claims?Status=11&amp;PageNumber=1&amp;PageSize=10 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
 body=None 
 </msg>
<msg timestamp="20231130 16:37:26.836" level="INFO">GET Response : url=http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=11&amp;PageNumber=1&amp;PageSize=10 
 status=500, reason=Internal Server Error 
 headers={'Server': 'nginx/1.25.1', 'Date': 'Thu, 30 Nov 2023 14:38:56 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive'} 
 body={"traceId":"fd5b3938-de15-4a7e-904c-b8129fe553aa","errorCode":null,"errors":["System.NotSupportedException: Serialization and deserialization of 'System.IntPtr' instances are not supported. Path: $.model.exception.TargetSite.MethodHandle.Value.\n ---&gt; System.NotSupportedException: Serialization and deserialization of 'System.IntPtr' instances are not supported.\n   at System.Text.Json.Serialization.Converters.UnsupportedTypeConverter`1.Write(Utf8JsonWriter writer, T value, JsonSerializerOptions options)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   --- End of inner exception stack trace ---\n   at System.Text.Json.ThrowHelper.ThrowNotSupportedException(WriteStack&amp; state, NotSupportedException ex)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCoreAsObject(Utf8JsonWriter writer, Object value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.JsonSerializer.WriteCore[TValue](JsonConverter jsonConverter, Utf8JsonWriter writer, TValue&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeNextResultFilterAsync&gt;g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultFilters()\n--- End of stack trace from previous location ---\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeFilterPipelineAsync&gt;g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Logged|17_1(ResourceInvoker invoker)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Logged|17_1(ResourceInvoker invoker)\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.&lt;Invoke&gt;g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\n   at InsurTech.Core.Api.Infrastructure.Middlewares.IdentityMiddleware.InvokeAsync(HttpContext httpContext)\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\n   at InsurTech.Core.Api.Infrastructure.Middlewares.ExceptionMiddleware.InvokeAsync(HttpContext httpContext)"]} 
 </msg>
<msg timestamp="20231130 16:37:26.837" level="INFO">${resp} = &lt;Response [500]&gt;</msg>
<status status="PASS" starttime="20231130 16:37:26.426" endtime="20231130 16:37:26.837"></status>
</kw>
<kw name="Status Should Be" library="RequestsLibrary">
<doc>Fails if response status code is different than the expected.</doc>
<arguments>
<arg>${statuscode}</arg>
<arg>${resp}</arg>
</arguments>
<msg timestamp="20231130 16:37:26.838" level="FAIL">Url: http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=11&amp;PageNumber=1&amp;PageSize=10 Expected status: 500 != 200</msg>
<status status="FAIL" starttime="20231130 16:37:26.837" endtime="20231130 16:37:26.838"></status>
</kw>
<status status="FAIL" starttime="20231130 16:37:26.425" endtime="20231130 16:37:26.840"></status>
</kw>
<status status="FAIL" starttime="20231130 16:37:26.424" endtime="20231130 16:37:26.841"></status>
</kw>
<status status="FAIL" starttime="20231130 16:37:26.421" endtime="20231130 16:37:26.841"></status>
</kw>
<tags>
<tag>regression</tag>
<tag>smoke</tag>
</tags>
<status status="FAIL" starttime="20231130 16:37:26.419" endtime="20231130 16:37:26.841" critical="yes">Url: http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=11&amp;PageNumber=1&amp;PageSize=10 Expected status: 500 != 200</status>
</test>
<test id="s1-s1-t3" name="verify get claims">
<kw name="Get_All_Submitted_Claims">
<arguments>
<arg>http://claimsapi-qc.rasan.co/</arg>
<arg>/api/Claim/Claims?Status=12&amp;PageNumber=1&amp;PageSize=10</arg>
<arg>200</arg>
<arg>["model"]["data"]["apiErrorOutputDTO"]["errorCode"]</arg>
<arg>1</arg>
</arguments>
<kw name="Create API session" library="API_Preferences">
<arguments>
<arg>${URL}</arg>
</arguments>
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>4</arg>
<arg>[NUMBERS]</arg>
</arguments>
<assign>
<var>${randomNumber}</var>
</assign>
<msg timestamp="20231130 16:37:26.843" level="INFO">${randomNumber} = 5458</msg>
<status status="PASS" starttime="20231130 16:37:26.843" endtime="20231130 16:37:26.843"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>session_${randomNumber}</arg>
</arguments>
<assign>
<var>${sessionName}</var>
</assign>
<msg timestamp="20231130 16:37:26.844" level="INFO">${sessionName} = session_5458</msg>
<status status="PASS" starttime="20231130 16:37:26.843" endtime="20231130 16:37:26.844"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${sessionName}</arg>
</arguments>
<msg timestamp="20231130 16:37:26.844" level="INFO">${sessionName} = session_5458</msg>
<status status="PASS" starttime="20231130 16:37:26.844" endtime="20231130 16:37:26.844"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${Base_Url}</arg>
<arg>timeout=30</arg>
<arg>disable_warnings=1</arg>
</arguments>
<msg timestamp="20231130 16:37:26.845" level="INFO">Creating Session using : alias=session_5458, url=http://claimsapi-qc.rasan.co/, headers={},                     cookies={}, auth=None, timeout=30, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20231130 16:37:26.844" endtime="20231130 16:37:26.845"></status>
</kw>
<status status="PASS" starttime="20231130 16:37:26.843" endtime="20231130 16:37:26.845"></status>
</kw>
<kw name="Get Request claim" library="API_Preferences">
<arguments>
<arg>${sessionName}</arg>
<arg>${URI}</arg>
<arg>${StatusCode}</arg>
<arg>${actual}</arg>
<arg>${Expected}</arg>
<arg>${RandomData}</arg>
</arguments>
<kw name="Get Request using data Driven Structure" library="API_Preferences">
<doc>Get request with DataDriven structure</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${Url}</arg>
<arg>${StatusCode}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20231130 16:37:26.846" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20231130 16:37:26.846" endtime="20231130 16:37:26.846"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>*DEPRECATED* Please use `GET On Session` instead.</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${URI}</arg>
<arg>headers=${headers}</arg>
<arg>timeout=10</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20231130 16:37:26.846" level="WARN">Keyword 'RequestsLibrary.Get Request' is deprecated. Please use `GET On Session` instead.</msg>
<msg timestamp="20231130 16:37:28.090" level="INFO">GET Request : url=http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=12&amp;PageNumber=1&amp;PageSize=10 
 path_url=/api/Claim/Claims?Status=12&amp;PageNumber=1&amp;PageSize=10 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
 body=None 
 </msg>
<msg timestamp="20231130 16:37:28.091" level="INFO">GET Response : url=http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=12&amp;PageNumber=1&amp;PageSize=10 
 status=500, reason=Internal Server Error 
 headers={'Server': 'nginx/1.25.1', 'Date': 'Thu, 30 Nov 2023 14:38:57 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive'} 
 body={"traceId":"c1e31390-1837-4bbf-9514-0300e39978b4","errorCode":null,"errors":["System.NotSupportedException: Serialization and deserialization of 'System.IntPtr' instances are not supported. Path: $.model.exception.TargetSite.MethodHandle.Value.\n ---&gt; System.NotSupportedException: Serialization and deserialization of 'System.IntPtr' instances are not supported.\n   at System.Text.Json.Serialization.Converters.UnsupportedTypeConverter`1.Write(Utf8JsonWriter writer, T value, JsonSerializerOptions options)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   --- End of inner exception stack trace ---\n   at System.Text.Json.ThrowHelper.ThrowNotSupportedException(WriteStack&amp; state, NotSupportedException ex)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCoreAsObject(Utf8JsonWriter writer, Object value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.JsonSerializer.WriteCore[TValue](JsonConverter jsonConverter, Utf8JsonWriter writer, TValue&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeNextResultFilterAsync&gt;g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultFilters()\n--- End of stack trace from previous location ---\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeFilterPipelineAsync&gt;g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Logged|17_1(ResourceInvoker invoker)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Logged|17_1(ResourceInvoker invoker)\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.&lt;Invoke&gt;g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\n   at InsurTech.Core.Api.Infrastructure.Middlewares.IdentityMiddleware.InvokeAsync(HttpContext httpContext)\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\n   at InsurTech.Core.Api.Infrastructure.Middlewares.ExceptionMiddleware.InvokeAsync(HttpContext httpContext)"]} 
 </msg>
<msg timestamp="20231130 16:37:28.092" level="INFO">${resp} = &lt;Response [500]&gt;</msg>
<status status="PASS" starttime="20231130 16:37:26.846" endtime="20231130 16:37:28.092"></status>
</kw>
<kw name="Status Should Be" library="RequestsLibrary">
<doc>Fails if response status code is different than the expected.</doc>
<arguments>
<arg>${statuscode}</arg>
<arg>${resp}</arg>
</arguments>
<msg timestamp="20231130 16:37:28.096" level="FAIL">Url: http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=12&amp;PageNumber=1&amp;PageSize=10 Expected status: 500 != 200</msg>
<status status="FAIL" starttime="20231130 16:37:28.093" endtime="20231130 16:37:28.096"></status>
</kw>
<status status="FAIL" starttime="20231130 16:37:26.846" endtime="20231130 16:37:28.098"></status>
</kw>
<status status="FAIL" starttime="20231130 16:37:26.845" endtime="20231130 16:37:28.098"></status>
</kw>
<status status="FAIL" starttime="20231130 16:37:26.842" endtime="20231130 16:37:28.099"></status>
</kw>
<tags>
<tag>regression</tag>
<tag>smoke</tag>
</tags>
<status status="FAIL" starttime="20231130 16:37:26.841" endtime="20231130 16:37:28.099" critical="yes">Url: http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=12&amp;PageNumber=1&amp;PageSize=10 Expected status: 500 != 200</status>
</test>
<test id="s1-s1-t4" name="verify get claims">
<kw name="Get_All_Submitted_Claims">
<arguments>
<arg>http://claimsapi-qc.rasan.co/</arg>
<arg>/api/Claim/Claims?Status=16&amp;PageNumber=1&amp;PageSize=10</arg>
<arg>200</arg>
<arg>["model"]["data"]["apiErrorOutputDTO"]["errorCode"]</arg>
<arg>1</arg>
</arguments>
<kw name="Create API session" library="API_Preferences">
<arguments>
<arg>${URL}</arg>
</arguments>
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>4</arg>
<arg>[NUMBERS]</arg>
</arguments>
<assign>
<var>${randomNumber}</var>
</assign>
<msg timestamp="20231130 16:37:28.105" level="INFO">${randomNumber} = 9002</msg>
<status status="PASS" starttime="20231130 16:37:28.104" endtime="20231130 16:37:28.105"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>session_${randomNumber}</arg>
</arguments>
<assign>
<var>${sessionName}</var>
</assign>
<msg timestamp="20231130 16:37:28.105" level="INFO">${sessionName} = session_9002</msg>
<status status="PASS" starttime="20231130 16:37:28.105" endtime="20231130 16:37:28.105"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${sessionName}</arg>
</arguments>
<msg timestamp="20231130 16:37:28.106" level="INFO">${sessionName} = session_9002</msg>
<status status="PASS" starttime="20231130 16:37:28.106" endtime="20231130 16:37:28.107"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${Base_Url}</arg>
<arg>timeout=30</arg>
<arg>disable_warnings=1</arg>
</arguments>
<msg timestamp="20231130 16:37:28.109" level="INFO">Creating Session using : alias=session_9002, url=http://claimsapi-qc.rasan.co/, headers={},                     cookies={}, auth=None, timeout=30, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20231130 16:37:28.107" endtime="20231130 16:37:28.109"></status>
</kw>
<status status="PASS" starttime="20231130 16:37:28.104" endtime="20231130 16:37:28.109"></status>
</kw>
<kw name="Get Request claim" library="API_Preferences">
<arguments>
<arg>${sessionName}</arg>
<arg>${URI}</arg>
<arg>${StatusCode}</arg>
<arg>${actual}</arg>
<arg>${Expected}</arg>
<arg>${RandomData}</arg>
</arguments>
<kw name="Get Request using data Driven Structure" library="API_Preferences">
<doc>Get request with DataDriven structure</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${Url}</arg>
<arg>${StatusCode}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20231130 16:37:28.115" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20231130 16:37:28.113" endtime="20231130 16:37:28.115"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>*DEPRECATED* Please use `GET On Session` instead.</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${URI}</arg>
<arg>headers=${headers}</arg>
<arg>timeout=10</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20231130 16:37:28.116" level="WARN">Keyword 'RequestsLibrary.Get Request' is deprecated. Please use `GET On Session` instead.</msg>
<msg timestamp="20231130 16:37:28.630" level="INFO">GET Request : url=http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=16&amp;PageNumber=1&amp;PageSize=10 
 path_url=/api/Claim/Claims?Status=16&amp;PageNumber=1&amp;PageSize=10 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
 body=None 
 </msg>
<msg timestamp="20231130 16:37:28.630" level="INFO">GET Response : url=http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=16&amp;PageNumber=1&amp;PageSize=10 
 status=500, reason=Internal Server Error 
 headers={'Server': 'nginx/1.25.1', 'Date': 'Thu, 30 Nov 2023 14:38:58 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive'} 
 body={"traceId":"e7583663-aeab-4871-bc43-9427b73d38cb","errorCode":null,"errors":["System.NotSupportedException: Serialization and deserialization of 'System.IntPtr' instances are not supported. Path: $.model.exception.TargetSite.MethodHandle.Value.\n ---&gt; System.NotSupportedException: Serialization and deserialization of 'System.IntPtr' instances are not supported.\n   at System.Text.Json.Serialization.Converters.UnsupportedTypeConverter`1.Write(Utf8JsonWriter writer, T value, JsonSerializerOptions options)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   --- End of inner exception stack trace ---\n   at System.Text.Json.ThrowHelper.ThrowNotSupportedException(WriteStack&amp; state, NotSupportedException ex)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCoreAsObject(Utf8JsonWriter writer, Object value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.JsonSerializer.WriteCore[TValue](JsonConverter jsonConverter, Utf8JsonWriter writer, TValue&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeNextResultFilterAsync&gt;g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultFilters()\n--- End of stack trace from previous location ---\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeFilterPipelineAsync&gt;g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Logged|17_1(ResourceInvoker invoker)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Logged|17_1(ResourceInvoker invoker)\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.&lt;Invoke&gt;g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\n   at InsurTech.Core.Api.Infrastructure.Middlewares.IdentityMiddleware.InvokeAsync(HttpContext httpContext)\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\n   at InsurTech.Core.Api.Infrastructure.Middlewares.ExceptionMiddleware.InvokeAsync(HttpContext httpContext)"]} 
 </msg>
<msg timestamp="20231130 16:37:28.632" level="INFO">${resp} = &lt;Response [500]&gt;</msg>
<status status="PASS" starttime="20231130 16:37:28.115" endtime="20231130 16:37:28.632"></status>
</kw>
<kw name="Status Should Be" library="RequestsLibrary">
<doc>Fails if response status code is different than the expected.</doc>
<arguments>
<arg>${statuscode}</arg>
<arg>${resp}</arg>
</arguments>
<msg timestamp="20231130 16:37:28.635" level="FAIL">Url: http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=16&amp;PageNumber=1&amp;PageSize=10 Expected status: 500 != 200</msg>
<status status="FAIL" starttime="20231130 16:37:28.632" endtime="20231130 16:37:28.635"></status>
</kw>
<status status="FAIL" starttime="20231130 16:37:28.112" endtime="20231130 16:37:28.640"></status>
</kw>
<status status="FAIL" starttime="20231130 16:37:28.110" endtime="20231130 16:37:28.640"></status>
</kw>
<status status="FAIL" starttime="20231130 16:37:28.103" endtime="20231130 16:37:28.640"></status>
</kw>
<tags>
<tag>regression</tag>
<tag>smoke</tag>
</tags>
<status status="FAIL" starttime="20231130 16:37:28.102" endtime="20231130 16:37:28.640" critical="yes">Url: http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=16&amp;PageNumber=1&amp;PageSize=10 Expected status: 500 != 200</status>
</test>
<test id="s1-s1-t5" name="verify get claims">
<kw name="Get_All_Submitted_Claims">
<arguments>
<arg>http://claimsapi-qc.rasan.co/</arg>
<arg>/api/Claim/Claims?Status=30&amp;PageNumber=1&amp;PageSize=11</arg>
<arg>200</arg>
<arg>["model"]["data"]["apiErrorOutputDTO"]["errorCode"]</arg>
<arg>185</arg>
</arguments>
<kw name="Create API session" library="API_Preferences">
<arguments>
<arg>${URL}</arg>
</arguments>
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>4</arg>
<arg>[NUMBERS]</arg>
</arguments>
<assign>
<var>${randomNumber}</var>
</assign>
<msg timestamp="20231130 16:37:28.645" level="INFO">${randomNumber} = 6597</msg>
<status status="PASS" starttime="20231130 16:37:28.644" endtime="20231130 16:37:28.645"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>session_${randomNumber}</arg>
</arguments>
<assign>
<var>${sessionName}</var>
</assign>
<msg timestamp="20231130 16:37:28.645" level="INFO">${sessionName} = session_6597</msg>
<status status="PASS" starttime="20231130 16:37:28.645" endtime="20231130 16:37:28.645"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${sessionName}</arg>
</arguments>
<msg timestamp="20231130 16:37:28.645" level="INFO">${sessionName} = session_6597</msg>
<status status="PASS" starttime="20231130 16:37:28.645" endtime="20231130 16:37:28.645"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${Base_Url}</arg>
<arg>timeout=30</arg>
<arg>disable_warnings=1</arg>
</arguments>
<msg timestamp="20231130 16:37:28.646" level="INFO">Creating Session using : alias=session_6597, url=http://claimsapi-qc.rasan.co/, headers={},                     cookies={}, auth=None, timeout=30, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20231130 16:37:28.646" endtime="20231130 16:37:28.646"></status>
</kw>
<status status="PASS" starttime="20231130 16:37:28.644" endtime="20231130 16:37:28.646"></status>
</kw>
<kw name="Get Request claim" library="API_Preferences">
<arguments>
<arg>${sessionName}</arg>
<arg>${URI}</arg>
<arg>${StatusCode}</arg>
<arg>${actual}</arg>
<arg>${Expected}</arg>
<arg>${RandomData}</arg>
</arguments>
<kw name="Get Request using data Driven Structure" library="API_Preferences">
<doc>Get request with DataDriven structure</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${Url}</arg>
<arg>${StatusCode}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20231130 16:37:28.647" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20231130 16:37:28.647" endtime="20231130 16:37:28.647"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>*DEPRECATED* Please use `GET On Session` instead.</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${URI}</arg>
<arg>headers=${headers}</arg>
<arg>timeout=10</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20231130 16:37:28.647" level="WARN">Keyword 'RequestsLibrary.Get Request' is deprecated. Please use `GET On Session` instead.</msg>
<msg timestamp="20231130 16:37:29.097" level="INFO">GET Request : url=http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=30&amp;PageNumber=1&amp;PageSize=11 
 path_url=/api/Claim/Claims?Status=30&amp;PageNumber=1&amp;PageSize=11 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
 body=None 
 </msg>
<msg timestamp="20231130 16:37:29.098" level="INFO">GET Response : url=http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=30&amp;PageNumber=1&amp;PageSize=11 
 status=500, reason=Internal Server Error 
 headers={'Server': 'nginx/1.25.1', 'Date': 'Thu, 30 Nov 2023 14:38:59 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive'} 
 body={"traceId":"bb9b25f2-2344-4feb-840a-3b326b650cba","errorCode":null,"errors":["System.NotSupportedException: Serialization and deserialization of 'System.IntPtr' instances are not supported. Path: $.model.exception.TargetSite.MethodHandle.Value.\n ---&gt; System.NotSupportedException: Serialization and deserialization of 'System.IntPtr' instances are not supported.\n   at System.Text.Json.Serialization.Converters.UnsupportedTypeConverter`1.Write(Utf8JsonWriter writer, T value, JsonSerializerOptions options)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   --- End of inner exception stack trace ---\n   at System.Text.Json.ThrowHelper.ThrowNotSupportedException(WriteStack&amp; state, NotSupportedException ex)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCoreAsObject(Utf8JsonWriter writer, Object value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.JsonSerializer.WriteCore[TValue](JsonConverter jsonConverter, Utf8JsonWriter writer, TValue&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeNextResultFilterAsync&gt;g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultFilters()\n--- End of stack trace from previous location ---\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeFilterPipelineAsync&gt;g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Logged|17_1(ResourceInvoker invoker)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Logged|17_1(ResourceInvoker invoker)\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.&lt;Invoke&gt;g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\n   at InsurTech.Core.Api.Infrastructure.Middlewares.IdentityMiddleware.InvokeAsync(HttpContext httpContext)\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\n   at InsurTech.Core.Api.Infrastructure.Middlewares.ExceptionMiddleware.InvokeAsync(HttpContext httpContext)"]} 
 </msg>
<msg timestamp="20231130 16:37:29.098" level="INFO">${resp} = &lt;Response [500]&gt;</msg>
<status status="PASS" starttime="20231130 16:37:28.647" endtime="20231130 16:37:29.098"></status>
</kw>
<kw name="Status Should Be" library="RequestsLibrary">
<doc>Fails if response status code is different than the expected.</doc>
<arguments>
<arg>${statuscode}</arg>
<arg>${resp}</arg>
</arguments>
<msg timestamp="20231130 16:37:29.099" level="FAIL">Url: http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=30&amp;PageNumber=1&amp;PageSize=11 Expected status: 500 != 200</msg>
<status status="FAIL" starttime="20231130 16:37:29.098" endtime="20231130 16:37:29.099"></status>
</kw>
<status status="FAIL" starttime="20231130 16:37:28.647" endtime="20231130 16:37:29.100"></status>
</kw>
<status status="FAIL" starttime="20231130 16:37:28.646" endtime="20231130 16:37:29.100"></status>
</kw>
<status status="FAIL" starttime="20231130 16:37:28.643" endtime="20231130 16:37:29.101"></status>
</kw>
<tags>
<tag>regression</tag>
<tag>smoke</tag>
</tags>
<status status="FAIL" starttime="20231130 16:37:28.642" endtime="20231130 16:37:29.101" critical="yes">Url: http://claimsapi-qc.rasan.co/api/Claim/Claims?Status=30&amp;PageNumber=1&amp;PageSize=11 Expected status: 500 != 200</status>
</test>
<test id="s1-s1-t6" name="verify get claims">
<kw name="Get_All_Submitted_Claims">
<arguments>
<arg>http://claimsapi-qc.rasan.co/</arg>
<arg>/api/Claim/Claims?PageNumber=1&amp;PageSize=10&amp;ChannelId=2</arg>
<arg>200</arg>
<arg>["model"]["data"]["apiErrorOutputDTO"]["errorCode"]</arg>
<arg>185</arg>
</arguments>
<kw name="Create API session" library="API_Preferences">
<arguments>
<arg>${URL}</arg>
</arguments>
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>4</arg>
<arg>[NUMBERS]</arg>
</arguments>
<assign>
<var>${randomNumber}</var>
</assign>
<msg timestamp="20231130 16:37:29.104" level="INFO">${randomNumber} = 4814</msg>
<status status="PASS" starttime="20231130 16:37:29.104" endtime="20231130 16:37:29.104"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>session_${randomNumber}</arg>
</arguments>
<assign>
<var>${sessionName}</var>
</assign>
<msg timestamp="20231130 16:37:29.105" level="INFO">${sessionName} = session_4814</msg>
<status status="PASS" starttime="20231130 16:37:29.104" endtime="20231130 16:37:29.105"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${sessionName}</arg>
</arguments>
<msg timestamp="20231130 16:37:29.105" level="INFO">${sessionName} = session_4814</msg>
<status status="PASS" starttime="20231130 16:37:29.105" endtime="20231130 16:37:29.105"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${Base_Url}</arg>
<arg>timeout=30</arg>
<arg>disable_warnings=1</arg>
</arguments>
<msg timestamp="20231130 16:37:29.105" level="INFO">Creating Session using : alias=session_4814, url=http://claimsapi-qc.rasan.co/, headers={},                     cookies={}, auth=None, timeout=30, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20231130 16:37:29.105" endtime="20231130 16:37:29.106"></status>
</kw>
<status status="PASS" starttime="20231130 16:37:29.103" endtime="20231130 16:37:29.106"></status>
</kw>
<kw name="Get Request claim" library="API_Preferences">
<arguments>
<arg>${sessionName}</arg>
<arg>${URI}</arg>
<arg>${StatusCode}</arg>
<arg>${actual}</arg>
<arg>${Expected}</arg>
<arg>${RandomData}</arg>
</arguments>
<kw name="Get Request using data Driven Structure" library="API_Preferences">
<doc>Get request with DataDriven structure</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${Url}</arg>
<arg>${StatusCode}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20231130 16:37:29.107" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20231130 16:37:29.106" endtime="20231130 16:37:29.107"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>*DEPRECATED* Please use `GET On Session` instead.</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${URI}</arg>
<arg>headers=${headers}</arg>
<arg>timeout=10</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20231130 16:37:29.107" level="WARN">Keyword 'RequestsLibrary.Get Request' is deprecated. Please use `GET On Session` instead.</msg>
<msg timestamp="20231130 16:37:29.551" level="INFO">GET Request : url=http://claimsapi-qc.rasan.co/api/Claim/Claims?PageNumber=1&amp;PageSize=10&amp;ChannelId=2 
 path_url=/api/Claim/Claims?PageNumber=1&amp;PageSize=10&amp;ChannelId=2 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
 body=None 
 </msg>
<msg timestamp="20231130 16:37:29.551" level="INFO">GET Response : url=http://claimsapi-qc.rasan.co/api/Claim/Claims?PageNumber=1&amp;PageSize=10&amp;ChannelId=2 
 status=500, reason=Internal Server Error 
 headers={'Server': 'nginx/1.25.1', 'Date': 'Thu, 30 Nov 2023 14:38:59 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive'} 
 body={"traceId":"19bdb165-a3b1-479c-8963-7b318ae49ca7","errorCode":null,"errors":["System.NotSupportedException: Serialization and deserialization of 'System.IntPtr' instances are not supported. Path: $.model.exception.TargetSite.MethodHandle.Value.\n ---&gt; System.NotSupportedException: Serialization and deserialization of 'System.IntPtr' instances are not supported.\n   at System.Text.Json.Serialization.Converters.UnsupportedTypeConverter`1.Write(Utf8JsonWriter writer, T value, JsonSerializerOptions options)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   --- End of inner exception stack trace ---\n   at System.Text.Json.ThrowHelper.ThrowNotSupportedException(WriteStack&amp; state, NotSupportedException ex)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCoreAsObject(Utf8JsonWriter writer, Object value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.JsonSerializer.WriteCore[TValue](JsonConverter jsonConverter, Utf8JsonWriter writer, TValue&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeNextResultFilterAsync&gt;g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultFilters()\n--- End of stack trace from previous location ---\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeFilterPipelineAsync&gt;g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Logged|17_1(ResourceInvoker invoker)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Logged|17_1(ResourceInvoker invoker)\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.&lt;Invoke&gt;g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\n   at InsurTech.Core.Api.Infrastructure.Middlewares.IdentityMiddleware.InvokeAsync(HttpContext httpContext)\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\n   at InsurTech.Core.Api.Infrastructure.Middlewares.ExceptionMiddleware.InvokeAsync(HttpContext httpContext)"]} 
 </msg>
<msg timestamp="20231130 16:37:29.552" level="INFO">${resp} = &lt;Response [500]&gt;</msg>
<status status="PASS" starttime="20231130 16:37:29.107" endtime="20231130 16:37:29.552"></status>
</kw>
<kw name="Status Should Be" library="RequestsLibrary">
<doc>Fails if response status code is different than the expected.</doc>
<arguments>
<arg>${statuscode}</arg>
<arg>${resp}</arg>
</arguments>
<msg timestamp="20231130 16:37:29.555" level="FAIL">Url: http://claimsapi-qc.rasan.co/api/Claim/Claims?PageNumber=1&amp;PageSize=10&amp;ChannelId=2 Expected status: 500 != 200</msg>
<status status="FAIL" starttime="20231130 16:37:29.553" endtime="20231130 16:37:29.556"></status>
</kw>
<status status="FAIL" starttime="20231130 16:37:29.106" endtime="20231130 16:37:29.559"></status>
</kw>
<status status="FAIL" starttime="20231130 16:37:29.106" endtime="20231130 16:37:29.560"></status>
</kw>
<status status="FAIL" starttime="20231130 16:37:29.103" endtime="20231130 16:37:29.560"></status>
</kw>
<tags>
<tag>regression</tag>
<tag>smoke</tag>
</tags>
<status status="FAIL" starttime="20231130 16:37:29.102" endtime="20231130 16:37:29.560" critical="yes">Url: http://claimsapi-qc.rasan.co/api/Claim/Claims?PageNumber=1&amp;PageSize=10&amp;ChannelId=2 Expected status: 500 != 200</status>
</test>
<test id="s1-s1-t7" name="verify get claims">
<kw name="Get_All_Submitted_Claims">
<arguments>
<arg>http://claimsapi-qc.rasan.co/</arg>
<arg>/api/Claim/Claims?SubmissionDateFrom=01%2F01%2F2023&amp;SubmissionDateTo=01%2F02%2F2023&amp;PageNumber=1&amp;PageSize=10</arg>
<arg>200</arg>
<arg>["model"]["data"]["apiErrorOutputDTO"]["errorCode"]</arg>
<arg>185</arg>
</arguments>
<kw name="Create API session" library="API_Preferences">
<arguments>
<arg>${URL}</arg>
</arguments>
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>4</arg>
<arg>[NUMBERS]</arg>
</arguments>
<assign>
<var>${randomNumber}</var>
</assign>
<msg timestamp="20231130 16:37:29.565" level="INFO">${randomNumber} = 0915</msg>
<status status="PASS" starttime="20231130 16:37:29.564" endtime="20231130 16:37:29.565"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>session_${randomNumber}</arg>
</arguments>
<assign>
<var>${sessionName}</var>
</assign>
<msg timestamp="20231130 16:37:29.566" level="INFO">${sessionName} = session_0915</msg>
<status status="PASS" starttime="20231130 16:37:29.565" endtime="20231130 16:37:29.566"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${sessionName}</arg>
</arguments>
<msg timestamp="20231130 16:37:29.568" level="INFO">${sessionName} = session_0915</msg>
<status status="PASS" starttime="20231130 16:37:29.567" endtime="20231130 16:37:29.568"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${Base_Url}</arg>
<arg>timeout=30</arg>
<arg>disable_warnings=1</arg>
</arguments>
<msg timestamp="20231130 16:37:29.569" level="INFO">Creating Session using : alias=session_0915, url=http://claimsapi-qc.rasan.co/, headers={},                     cookies={}, auth=None, timeout=30, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20231130 16:37:29.568" endtime="20231130 16:37:29.569"></status>
</kw>
<status status="PASS" starttime="20231130 16:37:29.564" endtime="20231130 16:37:29.569"></status>
</kw>
<kw name="Get Request claim" library="API_Preferences">
<arguments>
<arg>${sessionName}</arg>
<arg>${URI}</arg>
<arg>${StatusCode}</arg>
<arg>${actual}</arg>
<arg>${Expected}</arg>
<arg>${RandomData}</arg>
</arguments>
<kw name="Get Request using data Driven Structure" library="API_Preferences">
<doc>Get request with DataDriven structure</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${Url}</arg>
<arg>${StatusCode}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20231130 16:37:29.574" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20231130 16:37:29.572" endtime="20231130 16:37:29.574"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>*DEPRECATED* Please use `GET On Session` instead.</doc>
<arguments>
<arg>${sessionName}</arg>
<arg>${URI}</arg>
<arg>headers=${headers}</arg>
<arg>timeout=10</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20231130 16:37:29.574" level="WARN">Keyword 'RequestsLibrary.Get Request' is deprecated. Please use `GET On Session` instead.</msg>
<msg timestamp="20231130 16:37:30.010" level="INFO">GET Request : url=http://claimsapi-qc.rasan.co/api/Claim/Claims?SubmissionDateFrom=01%2F01%2F2023&amp;SubmissionDateTo=01%2F02%2F2023&amp;PageNumber=1&amp;PageSize=10 
 path_url=/api/Claim/Claims?SubmissionDateFrom=01%2F01%2F2023&amp;SubmissionDateTo=01%2F02%2F2023&amp;PageNumber=1&amp;PageSize=10 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
 body=None 
 </msg>
<msg timestamp="20231130 16:37:30.010" level="INFO">GET Response : url=http://claimsapi-qc.rasan.co/api/Claim/Claims?SubmissionDateFrom=01%2F01%2F2023&amp;SubmissionDateTo=01%2F02%2F2023&amp;PageNumber=1&amp;PageSize=10 
 status=500, reason=Internal Server Error 
 headers={'Server': 'nginx/1.25.1', 'Date': 'Thu, 30 Nov 2023 14:39:00 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive'} 
 body={"traceId":"a9e5e77f-35be-4604-bb59-7c6c8561258c","errorCode":null,"errors":["System.NotSupportedException: Serialization and deserialization of 'System.IntPtr' instances are not supported. Path: $.model.exception.TargetSite.MethodHandle.Value.\n ---&gt; System.NotSupportedException: Serialization and deserialization of 'System.IntPtr' instances are not supported.\n   at System.Text.Json.Serialization.Converters.UnsupportedTypeConverter`1.Write(Utf8JsonWriter writer, T value, JsonSerializerOptions options)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack&amp; state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   --- End of inner exception stack trace ---\n   at System.Text.Json.ThrowHelper.ThrowNotSupportedException(WriteStack&amp; state, NotSupportedException ex)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCoreAsObject(Utf8JsonWriter writer, Object value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.JsonSerializer.WriteCore[TValue](JsonConverter jsonConverter, Utf8JsonWriter writer, TValue&amp; value, JsonSerializerOptions options, WriteStack&amp; state)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeNextResultFilterAsync&gt;g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultFilters()\n--- End of stack trace from previous location ---\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeFilterPipelineAsync&gt;g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Logged|17_1(ResourceInvoker invoker)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Logged|17_1(ResourceInvoker invoker)\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.&lt;Invoke&gt;g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\n   at InsurTech.Core.Api.Infrastructure.Middlewares.IdentityMiddleware.InvokeAsync(HttpContext httpContext)\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\n   at InsurTech.Core.Api.Infrastructure.Middlewares.ExceptionMiddleware.InvokeAsync(HttpContext httpContext)"]} 
 </msg>
<msg timestamp="20231130 16:37:30.011" level="INFO">${resp} = &lt;Response [500]&gt;</msg>
<status status="PASS" starttime="20231130 16:37:29.574" endtime="20231130 16:37:30.011"></status>
</kw>
<kw name="Status Should Be" library="RequestsLibrary">
<doc>Fails if response status code is different than the expected.</doc>
<arguments>
<arg>${statuscode}</arg>
<arg>${resp}</arg>
</arguments>
<msg timestamp="20231130 16:37:30.014" level="FAIL">Url: http://claimsapi-qc.rasan.co/api/Claim/Claims?SubmissionDateFrom=01%2F01%2F2023&amp;SubmissionDateTo=01%2F02%2F2023&amp;PageNumber=1&amp;PageSize=10 Expected status: 500 != 200</msg>
<status status="FAIL" starttime="20231130 16:37:30.012" endtime="20231130 16:37:30.014"></status>
</kw>
<status status="FAIL" starttime="20231130 16:37:29.571" endtime="20231130 16:37:30.018"></status>
</kw>
<status status="FAIL" starttime="20231130 16:37:29.569" endtime="20231130 16:37:30.018"></status>
</kw>
<status status="FAIL" starttime="20231130 16:37:29.564" endtime="20231130 16:37:30.018"></status>
</kw>
<tags>
<tag>regression</tag>
<tag>smoke</tag>
</tags>
<status status="FAIL" starttime="20231130 16:37:29.562" endtime="20231130 16:37:30.019" critical="yes">Url: http://claimsapi-qc.rasan.co/api/Claim/Claims?SubmissionDateFrom=01%2F01%2F2023&amp;SubmissionDateTo=01%2F02%2F2023&amp;PageNumber=1&amp;PageSize=10 Expected status: 500 != 200</status>
</test>
<doc>Suite description</doc>
<status status="FAIL" starttime="20231130 16:37:03.736" endtime="20231130 16:37:30.020"></status>
</suite>
<status status="FAIL" starttime="20231130 16:37:03.717" endtime="20231130 16:37:30.024"></status>
</suite>
<statistics>
<total>
<stat pass="0" fail="7">Critical Tests</stat>
<stat pass="0" fail="7">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="7">regression</stat>
<stat pass="0" fail="7">smoke</stat>
</tag>
<suite>
<stat pass="0" fail="7" id="s1" name="Suites">Suites</stat>
<stat pass="0" fail="7" id="s1-s1" name="GetAllClaims">Suites.GetAllClaims</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20231130 16:37:25.885" level="WARN">Keyword 'RequestsLibrary.Get Request' is deprecated. Please use `GET On Session` instead.</msg>
<msg timestamp="20231130 16:37:26.419" level="WARN">Multiple test cases with name 'verify get claims' executed in test suite 'Suites.GetAllClaims'.</msg>
<msg timestamp="20231130 16:37:26.426" level="WARN">Keyword 'RequestsLibrary.Get Request' is deprecated. Please use `GET On Session` instead.</msg>
<msg timestamp="20231130 16:37:26.841" level="WARN">Multiple test cases with name 'verify get claims' executed in test suite 'Suites.GetAllClaims'.</msg>
<msg timestamp="20231130 16:37:26.846" level="WARN">Keyword 'RequestsLibrary.Get Request' is deprecated. Please use `GET On Session` instead.</msg>
<msg timestamp="20231130 16:37:28.099" level="WARN">Multiple test cases with name 'verify get claims' executed in test suite 'Suites.GetAllClaims'.</msg>
<msg timestamp="20231130 16:37:28.116" level="WARN">Keyword 'RequestsLibrary.Get Request' is deprecated. Please use `GET On Session` instead.</msg>
<msg timestamp="20231130 16:37:28.641" level="WARN">Multiple test cases with name 'verify get claims' executed in test suite 'Suites.GetAllClaims'.</msg>
<msg timestamp="20231130 16:37:28.647" level="WARN">Keyword 'RequestsLibrary.Get Request' is deprecated. Please use `GET On Session` instead.</msg>
<msg timestamp="20231130 16:37:29.101" level="WARN">Multiple test cases with name 'verify get claims' executed in test suite 'Suites.GetAllClaims'.</msg>
<msg timestamp="20231130 16:37:29.107" level="WARN">Keyword 'RequestsLibrary.Get Request' is deprecated. Please use `GET On Session` instead.</msg>
<msg timestamp="20231130 16:37:29.562" level="WARN">Multiple test cases with name 'verify get claims' executed in test suite 'Suites.GetAllClaims'.</msg>
<msg timestamp="20231130 16:37:29.574" level="WARN">Keyword 'RequestsLibrary.Get Request' is deprecated. Please use `GET On Session` instead.</msg>
</errors>
</robot>
